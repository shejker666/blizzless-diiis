using System.Collections.Generic;
using System.Linq;

namespace DiIiS_NA.GameServer.MessageSystem
{
    public static class GameAttributes
    {
        public static readonly Dictionary<int, GameAttribute> Attributes;
        static GameAttributes()
        {
            Attributes = typeof(GameAttributes).GetFields()
                .Where(a => a.IsStatic && a.FieldType.IsSubclassOf(typeof(GameAttribute)))
                .Select(a => a.GetValue(null) as GameAttribute)
                .ToDictionary(a => a.Id, a => a);
            ScriptedAttributeInitializer.ProcessAttributes(Attributes.Values);
        }

        #region Attributes list
        public static readonly GameAttributeF Axe_Bad_Data = new(0, "Axe_Bad_Data");
        public static readonly GameAttributeF Attribute_Timer = new(1, "Attribute_Timer");
        public static readonly GameAttributeF Attribute_Pool = new(2, "Attribute_Pool");
        public static readonly GameAttributeF Death_Count = new(3, "Death_Count");
        public static readonly GameAttributeI DualWield_Hand = new(4, "DualWield_Hand", max: 2, bitCount: 2);
        public static readonly GameAttributeI DualWield_Hand_Next = new(5, "DualWield_Hand_Next", max: 2, bitCount: 2);
        public static readonly GameAttributeB DualWield_Hands_Swapped = new(6, "DualWield_Hands_Swapped");
        public static readonly GameAttributeF Respawn_Game_Time = new(7, "Respawn_Game_Time");
        public static readonly GameAttributeI Backpack_Slots = new(8, "Backpack_Slots", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, max: 128, bitCount: 8);
        public static readonly GameAttributeI Shared_Stash_Slots = new(9, "Shared_Stash_Slots", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, max: 910, bitCount: 10);
        public static readonly GameAttributeF Strength = new(10, "Strength", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Dexterity = new(11, "Dexterity", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Intelligence = new(12, "Intelligence", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Vitality = new(13, "Vitality", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Strength_Total = new(14, "Strength_Total", script: "((Strength  +  Stats_All_Bonus + Strength_Bonus + ((Strength_Item + Cube_Enchanted_Strength_Item) * Core_Attributes_From_Item_Bonus_Multiplier)) * (1 + Strength_Bonus_Percent)) * (1-Strength_Reduction_Percent)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Dexterity_Total = new(15, "Dexterity_Total", script: "((Dexterity + Stats_All_Bonus + Dexterity_Bonus + ((Dexterity_Item + Cube_Enchanted_Dexterity_Item) * Core_Attributes_From_Item_Bonus_Multiplier)) * (1 + Dexterity_Bonus_Percent)) * (1-Dexterity_Reduction_Percent)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Intelligence_Total = new(16, "Intelligence_Total", script: "((Intelligence + Stats_All_Bonus + Intelligence_Bonus + ((Intelligence_Item + Cube_Enchanted_Intelligence_Item) * Core_Attributes_From_Item_Bonus_Multiplier)) * (1 + Intelligence_Bonus_Percent)) * (1-Intelligence_Reduction_Percent)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Vitality_Total = new(17, "Vitality_Total", script: "((Vitality + Stats_All_Bonus + Vitality_Bonus + ((Vitality_Item + Cube_Enchanted_Vitality_Item) * Core_Attributes_From_Item_Bonus_Multiplier)) * (1 + Vitality_Bonus_Percent)) * (1-Vitality_Reduction_Percent)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Strength_Bonus = new(18, "Strength_Bonus", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Dexterity_Bonus = new(19, "Dexterity_Bonus", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Intelligence_Bonus = new(20, "Intelligence_Bonus", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Vitality_Bonus = new(21, "Vitality_Bonus", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Strength_Bonus_Percent = new(22, "Strength_Bonus_Percent", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Dexterity_Bonus_Percent = new(23, "Dexterity_Bonus_Percent", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Intelligence_Bonus_Percent = new(24, "Intelligence_Bonus_Percent", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Vitality_Bonus_Percent = new(25, "Vitality_Bonus_Percent", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Strength_Reduction_Percent = new(26, "Strength_Reduction_Percent", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Dexterity_Reduction_Percent = new(27, "Dexterity_Reduction_Percent", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Intelligence_Reduction_Percent = new(28, "Intelligence_Reduction_Percent", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Vitality_Reduction_Percent = new(29, "Vitality_Reduction_Percent", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeI Primary_Damage_Attribute = new(30, "Primary_Damage_Attribute", defaultValue: -1, min: -1, max: 3, bitCount: 3);
        public static readonly GameAttributeF Armor = new(31, "Armor", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Armor_Bonus_Percent = new(32, "Armor_Bonus_Percent", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Armor_Item = new(33, "Armor_Item", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Armor_Bonus_Item = new(34, "Armor_Bonus_Item", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Armor_Item_Percent = new(35, "Armor_Item_Percent", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Armor_Item_SubTotal = new(36, "Armor_Item_SubTotal", script: "FLOOR((Armor_Item + Armor_Bonus_Item) * (Armor_Item_Percent + 1))", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Armor_Item_Total = new(37, "Armor_Item_Total", script: "(Armor_Item > 0)?(Max(Armor_Item_SubTotal,  1)):Armor_Item_SubTotal", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Armor_Total = new(38, "Armor_Total", script: "FLOOR((Armor + Armor_Item_Total + Strength_Total + Dexterity_Total) * (Armor_Bonus_Percent + 1))", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Experience_Granted_Hi = new(39, "Experience_Granted_Hi", u5: 1, flags: ReplicationFlags.PlayerReplicated);
        public static readonly GameAttributeF Experience_Granted_Low = new(40, "Experience_Granted_Low", u5: 1, flags: ReplicationFlags.PlayerReplicated);
        public static readonly GameAttributeI Experience_Next_Hi = new(41, "Experience_Next_Hi", u5: 1, flags: ReplicationFlags.PlayerReplicated);
        public static readonly GameAttributeI Experience_Next_Lo = new(42, "Experience_Next_Lo", u5: 1, flags: ReplicationFlags.PlayerReplicated);
        public static readonly GameAttributeI Alt_Experience_Next_Hi = new(43, "Alt_Experience_Next_Hi", flags: ReplicationFlags.PlayerReplicated);
        public static readonly GameAttributeI Alt_Experience_Next_Lo = new(44, "Alt_Experience_Next_Lo", flags: ReplicationFlags.PlayerReplicated);
        public static readonly GameAttributeI Rest_Experience_Hi = new(45, "Rest_Experience_Hi", flags: ReplicationFlags.PlayerReplicated);
        public static readonly GameAttributeI Rest_Experience_Lo = new(46, "Rest_Experience_Lo", flags: ReplicationFlags.PlayerReplicated);
        public static readonly GameAttributeF Rest_Experience_Bonus_Percent = new(47, "Rest_Experience_Bonus_Percent", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeI Gold_Granted = new(48, "Gold_Granted", u5: 1, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeI Gold = new(49, "Gold", u5: 1, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Gold_Find = new(50, "Gold_Find");
        public static readonly GameAttributeF Gold_Find_Uncapped = new(51, "Gold_Find_Uncapped");
        public static readonly GameAttributeF Gold_Find_Handicap = new(52, "Gold_Find_Handicap");
        public static readonly GameAttributeF Gold_Find_Alt_Levels_Total = new(53, "Gold_Find_Alt_Levels_Total", script: "Alt_Level * 0.00");
        public static readonly GameAttributeF Gold_Find_Community_Buff = new(54, "Gold_Find_Community_Buff", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Gold_Find_Potion_Buff = new(55, "Gold_Find_Potion_Buff", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Gold_Find_Total = new(56, "Gold_Find_Total", script: "((1.0 + Gold_Find_Uncapped + Gold_Find_Alt_Levels_Total + Gold_Find + Gold_Find_Community_Buff + Gold_Find_Potion_Buff) * (1.0 + Gold_Find_Handicap))-1.0");
        public static readonly GameAttributeI Level = new(57, "Level", GameAttributeEncoding.IntMinMax, flags: (ReplicationFlags)222, min: -1, max: 99, bitCount: 7); // FIXME: incorrect flags
        public static readonly GameAttributeI Level_Cap = new(58, "Level_Cap", GameAttributeEncoding.IntMinMax, flags: ReplicationFlags.PlayerReplicated, min: -1, max: 70, bitCount: 7);
        public static readonly GameAttributeI Alt_Level = new(59, "Alt_Level", GameAttributeEncoding.IntMinMax, flags: ReplicationFlags.PlayerReplicated, min: -1, max: 20000, bitCount: 15);
        public static readonly GameAttributeF Magic_Find = new(60, "Magic_Find");
        public static readonly GameAttributeF Magic_Find_Uncapped = new(61, "Magic_Find_Uncapped");
        public static readonly GameAttributeF Magic_Find_Handicap = new(62, "Magic_Find_Handicap");
        public static readonly GameAttributeF Magic_Find_Alt_Levels_Total = new(63, "Magic_Find_Alt_Levels_Total", script: "Alt_Level * 0.00");
        public static readonly GameAttributeF Magic_Find_Capped_Subtotal = new(64, "Magic_Find_Capped_Subtotal", script: "Min((Magic_Find_Alt_Levels_Total + Magic_Find), 3.0)");
        public static readonly GameAttributeF Magic_Find_Total = new(65, "Magic_Find_Total", script: "Magic_Find_Uncapped + Magic_Find_Handicap + Magic_Find_Capped_Subtotal");
        public static readonly GameAttributeB Magic_And_Gold_Find_Suppressed = new(66, "Magic_And_Gold_Find_Suppressed");
        public static readonly GameAttributeF Treasure_Find = new(67, "Treasure_Find", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Legendary_Find_Community_Buff = new(68, "Legendary_Find_Community_Buff", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeI Resource_Cost_Reduction_Amount = new(69, "Resource_Cost_Reduction_Amount", min: -4095, max: 16383, bitCount: 15);
        public static readonly GameAttributeF Resource_Cost_Reduction_Total = new(70, "Resource_Cost_Reduction_Total", encodingType: GameAttributeEncoding.Float16, script: "Resource_Cost_Reduction_Amount", bitCount: 16);
        public static readonly GameAttributeF Resource_Set_Point_Bonus = new(71, "Resource_Set_Point_Bonus", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Faster_Healing_Percent = new(72, "Faster_Healing_Percent", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Spending_Resource_Heals_Percent = new(73, "Spending_Resource_Heals_Percent", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Bonus_Healing_Received_Percent = new(74, "Bonus_Healing_Received_Percent", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Reduced_Healing_Received_Percent = new(75, "Reduced_Healing_Received_Percent", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeB Healing_Well_Restores_Resource = new(76, "Healing_Well_Restores_Resource");
        public static readonly GameAttributeF Experience_Bonus = new(77, "Experience_Bonus", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Experience_Bonus_Percent = new(78, "Experience_Bonus_Percent", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Experience_Bonus_Percent_Handicap = new(79, "Experience_Bonus_Percent_Handicap", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Experience_Bonus_Percent_Total = new(80, "Experience_Bonus_Percent_Total", script: "Experience_Bonus_Percent * Experience_Bonus_Percent_Handicap");
        public static readonly GameAttributeF Experience_Bonus_No_Penalty = new(81, "Experience_Bonus_No_Penalty", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Health_Globe_Bonus_Chance = new(82, "Health_Globe_Bonus_Chance", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Health_Globe_Bonus_Mult_Chance = new(83, "Health_Globe_Bonus_Mult_Chance", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Powerup_Globe_Bonus_Chance = new(84, "Powerup_Globe_Bonus_Chance", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Powerup_Globe_Bonus_Mult_Chance = new(85, "Powerup_Globe_Bonus_Mult_Chance", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Health_Globe_Bonus_Health = new(86, "Health_Globe_Bonus_Health");
        public static readonly GameAttributeF Increased_Health_From_Globes_Percent = new(87, "Increased_Health_From_Globes_Percent", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Increased_Health_From_Globes_Percent_Total = new(88, "Increased_Health_From_Globes_Percent_Total", encodingType: GameAttributeEncoding.Float16Or32, script: "Increased_Health_From_Globes_Percent", bitCount: 0);
        public static readonly GameAttributeF Bonus_Health_Percent_Per_Second_From_Globes = new(89, "Bonus_Health_Percent_Per_Second_From_Globes", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Bonus_Health_Percent_Per_Second_From_Globes_Total = new(90, "Bonus_Health_Percent_Per_Second_From_Globes_Total", encodingType: GameAttributeEncoding.Float16, script: "Bonus_Health_Percent_Per_Second_From_Globes", bitCount: 16);
        public static readonly GameAttributeF Mana_Gained_From_Globes_Percent = new(91, "Mana_Gained_From_Globes_Percent", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Mana_Gained_From_Globes = new(92, "Mana_Gained_From_Globes", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Resistance = new(93, "Resistance", encodingType: GameAttributeEncoding.Float16, flags: (ReplicationFlags)222, bitCount: 16); // FIXME: incorrect flags
        public static readonly GameAttributeF Resistance_Percent = new(94, "Resistance_Percent", encodingType: GameAttributeEncoding.Float16, flags: (ReplicationFlags)222, bitCount: 16); // FIXME: incorrect flags
        public static readonly GameAttributeF Resistance_Total = new(95, "Resistance_Total", encodingType: GameAttributeEncoding.Float16Or32, script: "(Resistance + Resistance_All#NONE + Resistance_From_Intelligence#NONE) * ((Resistance_Percent_All#NONE + Resistance_Percent + 1))", bitCount: 0);
        public static readonly GameAttributeF Resistance_All = new(96, "Resistance_All", encodingType: GameAttributeEncoding.Float16, flags: (ReplicationFlags)222, bitCount: 16); // FIXME: incorrect flags
        public static readonly GameAttributeF Resistance_Percent_All = new(97, "Resistance_Percent_All", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Resistance_From_Intelligence = new(98, "Resistance_From_Intelligence", encodingType: GameAttributeEncoding.Float16, script: "(Intelligence_Total * 0.1)", bitCount: 16);
        public static readonly GameAttributeF Class_Damage_Reduction_Percent = new(99, "Class_Damage_Reduction_Percent", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeI Skill = new(100, "Skill", max: 4095, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 12);
        public static readonly GameAttributeI Skill_From_Item = new(101, "Skill_From_Item", encodingType: GameAttributeEncoding.IntMinMax, max: 1, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 1);
        public static readonly GameAttributeI Skill_Total = new(102, "Skill_Total", max: 4095, script: "Pin(Skill + Skill_From_Item, 0, 1)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 12);
        public static readonly GameAttributeI TeamID = new(103, "TeamID", encodingType: GameAttributeEncoding.IntMinMax, defaultValue: -1, min: -1, max: 23, u4: 1, u5: 1, flags: (ReplicationFlags)222, bitCount: 5); // FIXME: incorrect flags
        public static readonly GameAttributeI Team_Override = new(104, "Team_Override", encodingType: GameAttributeEncoding.IntMinMax, defaultValue: -1, min: -1, max: 23, flags: (ReplicationFlags)222, bitCount: 5); // FIXME: incorrect flags
        public static readonly GameAttributeB Invulnerable = new(105, "Invulnerable");
        public static readonly GameAttributeB Loading = new(106, "Loading", flags: (ReplicationFlags)222); // FIXME: incorrect flags
        public static readonly GameAttributeF Loading_Player_ACD = new(107, "Loading_Player_ACD", defaultValue: -1);
        public static readonly GameAttributeF Loading_Power_SNO = new(108, "Loading_Power_SNO", defaultValue: -1);
        public static readonly GameAttributeF Loading_Anim_Tag = new(109, "Loading_Anim_Tag", defaultValue: -1);
        public static readonly GameAttributeB Loading_NewGame = new(110, "Loading_NewGame");
        public static readonly GameAttributeB Auto_Porting_To_Save_Point = new(111, "Auto_Porting_To_Save_Point");
        public static readonly GameAttributeB No_Damage = new(112, "No_Damage");
        public static readonly GameAttributeB No_AutoPickup = new(113, "No_AutoPickup");
        public static readonly GameAttributeF Light_Radius_Percent_Bonus = new(114, "Light_Radius_Percent_Bonus", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Hitpoints_Cur = new(115, "Hitpoints_Cur", script: "Min(Hitpoints_Cur.Agg, Hitpoints_Max_Total)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Hitpoints_Factor_Level = new(116, "Hitpoints_Factor_Level", encodingType: GameAttributeEncoding.Float16Or32, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 0);
        public static readonly GameAttributeF Hitpoints_Factor_Vitality = new(117, "Hitpoints_Factor_Vitality", encodingType: GameAttributeEncoding.Float16Or32, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 0);
        public static readonly GameAttributeF Hitpoints_Total_From_Vitality = new(118, "Hitpoints_Total_From_Vitality", encodingType: GameAttributeEncoding.Float16Or32, script: "Vitality_Total * Hitpoints_Factor_Vitality", bitCount: 0);
        public static readonly GameAttributeF Hitpoints_Total_From_Level = new(119, "Hitpoints_Total_From_Level", encodingType: GameAttributeEncoding.Float16Or32, script: "(Level-1) * Hitpoints_Factor_Level", bitCount: 0);
        public static readonly GameAttributeF Hitpoints_Granted = new(120, "Hitpoints_Granted", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeI Hitpoints_Granted_Duration = new(121, "Hitpoints_Granted_Duration", max: 16777215, bitCount: 24);
        public static readonly GameAttributeF Hitpoints_Max = new(122, "Hitpoints_Max", encodingType: GameAttributeEncoding.Float16Or32, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 0);
        public static readonly GameAttributeF Hitpoints_Max_Bonus = new(123, "Hitpoints_Max_Bonus", encodingType: GameAttributeEncoding.Float16Or32, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 0);
        public static readonly GameAttributeF Hitpoints_Max_Total = new(124, "Hitpoints_Max_Total", script: "Max((Hitpoints_Max + Hitpoints_Total_From_Level + Hitpoints_Total_From_Vitality + Hitpoints_Max_Bonus) * (Hitpoints_Max_Percent_Bonus + Hitpoints_Max_Percent_Bonus_Item + 1) * (Hitpoints_Max_Percent_Bonus_Multiplicative), 1)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Hitpoints_Percent = new(125, "Hitpoints_Percent", encodingType: GameAttributeEncoding.Float16, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 16);
        public static readonly GameAttributeF Hitpoints_Regen_Per_Second = new(126, "Hitpoints_Regen_Per_Second", encodingType: GameAttributeEncoding.Float16Or32, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 0);
        public static readonly GameAttributeF Hitpoints_Regen_Per_Second_Bonus = new(127, "Hitpoints_Regen_Per_Second_Bonus", encodingType: GameAttributeEncoding.Float16Or32, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 0);
        public static readonly GameAttributeF Hitpoints_Regen_Per_Second_Bonus_From_Skills = new(128, "Hitpoints_Regen_Per_Second_Bonus_From_Skills", encodingType: GameAttributeEncoding.Float16Or32, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 0);
        public static readonly GameAttributeF Hitpoints_Regen_Bonus_Percent = new(129, "Hitpoints_Regen_Bonus_Percent", encodingType: GameAttributeEncoding.Float16Or32, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 0);
        public static readonly GameAttributeF Hitpoints_Regen_Per_Second_Subtotal = new(130, "Hitpoints_Regen_Per_Second_Subtotal", script: "(Hitpoints_Regen_Per_Second + Hitpoints_Regen_Per_Second_Bonus) * (1 + Hitpoints_Regen_Bonus_Percent)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Hitpoints_Regen_Reduction_Percent = new(131, "Hitpoints_Regen_Reduction_Percent", encodingType: GameAttributeEncoding.Float16Or32, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 0);
        public static readonly GameAttributeF Hitpoints_Regen_Per_Second_Health_Globe = new(132, "Hitpoints_Regen_Per_Second_Health_Globe", encodingType: GameAttributeEncoding.Float16Or32, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 0);
        public static readonly GameAttributeF Hitpoints_Regen_Per_Second_Total = new(133, "Hitpoints_Regen_Per_Second_Total", script: "((Hitpoints_Regen_Per_Second_Subtotal + (Hitpoints_Regen_Per_Second_Bonus_From_Skills * (1 + Hitpoints_Regen_Bonus_Percent))) * Pin(1-Hitpoints_Regen_Reduction_Percent, 0, 1)) + Hitpoints_Regen_Per_Second_Health_Globe", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Hitpoints_Max_Percent_Bonus = new(134, "Hitpoints_Max_Percent_Bonus", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Hitpoints_Max_Percent_Bonus_Item = new(135, "Hitpoints_Max_Percent_Bonus_Item", encodingType: GameAttributeEncoding.Float16, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 16);
        public static readonly GameAttributeF Hitpoints_Max_Percent_Bonus_Multiplicative = new(136, "Hitpoints_Max_Percent_Bonus_Multiplicative", defaultValue: 1065353216, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Hitpoints_Healed_Target = new(137, "Hitpoints_Healed_Target", encodingType: GameAttributeEncoding.Float16Or32, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 0);
        public static readonly GameAttributeB Hitpoints_Frozen = new(138, "Hitpoints_Frozen");
        public static readonly GameAttributeB Healing_Suppressed = new(139, "Healing_Suppressed");
        public static readonly GameAttributeF DOT_Damage_Taken_Queued = new(140, "DOT_Damage_Taken_Queued", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF DOT_Damage_Taken_Queued_Tick = new(141, "DOT_Damage_Taken_Queued_Tick");
        public static readonly GameAttributeF DOT_Damage_Taken_Queued_Player = new(142, "DOT_Damage_Taken_Queued_Player");
        public static readonly GameAttributeF DOT_Damage_Taken_Queued_Player_Tick = new(143, "DOT_Damage_Taken_Queued_Player_Tick");
        public static readonly GameAttributeF Healing_Received_Queued = new(144, "Healing_Received_Queued");
        public static readonly GameAttributeF Healing_Received_Queued_Tick = new(145, "Healing_Received_Queued_Tick");
        public static readonly GameAttributeF Staggered_Damage_Fraction = new(146, "Staggered_Damage_Fraction");
        public static readonly GameAttributeF Staggered_Damage_Duration = new(147, "Staggered_Damage_Duration");
        public static readonly GameAttributeI Resource_Type_Primary = new(148, "Resource_Type_Primary", defaultValue: -1, min: -1, max: 9, u4: 3, u5: 1, flags: ReplicationFlags.PlayerReplicated2, bitCount: 4);
        public static readonly GameAttributeI Resource_Type_Secondary = new(149, "Resource_Type_Secondary", defaultValue: -1, min: -1, max: 9, u4: 3, u5: 1, flags: ReplicationFlags.PlayerReplicated2, bitCount: 4);
        public static readonly GameAttributeF Resource_Cur = new(150, "Resource_Cur", u3: 10, script: "Max(Resource_Cur.Agg, 0)", flags: ReplicationFlags.PlayerReplicated2);
        public static readonly GameAttributeF Resource_Max = new(151, "Resource_Max", encodingType: GameAttributeEncoding.Float16Or32, u3: 10, flags: ReplicationFlags.PlayerReplicated2, bitCount: 0);
        public static readonly GameAttributeF Resource_Max_Bonus = new(152, "Resource_Max_Bonus", encodingType: GameAttributeEncoding.Float16Or32, u3: 10, flags: (ReplicationFlags)222, bitCount: 0); // FIXME: incorrect flags
        public static readonly GameAttributeF Resource_Max_Total = new(153, "Resource_Max_Total", u3: 10, script: "Max((Resource_Max + ((Level#NONE - 1) * Resource_Factor_Level) + Resource_Max_Bonus) * (Resource_Max_Percent_Bonus + 1),  0)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Resource_Factor_Level = new(154, "Resource_Factor_Level", encodingType: GameAttributeEncoding.Float16Or32, u3: 10, flags: ReplicationFlags.PlayerReplicated2, bitCount: 0);
        public static readonly GameAttributeF Resource_Granted = new(155, "Resource_Granted", encodingType: GameAttributeEncoding.Float16Or32, u3: 10, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 0);
        public static readonly GameAttributeI Resource_Granted_Duration = new(156, "Resource_Granted_Duration", max: 16777215, u3: 10, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 24);
        public static readonly GameAttributeF Resource_Percent = new(157, "Resource_Percent", encodingType: GameAttributeEncoding.Float16, defaultValue: 100, u3: 10, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 16);
        public static readonly GameAttributeF Resource_Regen_Per_Second = new(158, "Resource_Regen_Per_Second", encodingType: GameAttributeEncoding.Float16Or32, u3: 10, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 0);
        public static readonly GameAttributeF Resource_Regen_Bonus_Percent = new(159, "Resource_Regen_Bonus_Percent", encodingType: GameAttributeEncoding.Float16, u3: 10, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 16);
        public static readonly GameAttributeF Resource_Regen_Total = new(160, "Resource_Regen_Total", encodingType: GameAttributeEncoding.Float16, u3: 10, script: "Resource_Regen_Stop_Regen ? 0 : Resource_Regen_Per_Second * (1 + Resource_Regen_Bonus_Percent) + (Resource_Regen_Percent_Per_Second * Resource_Max_Total)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 16);
        public static readonly GameAttributeB Resource_Regen_Stop_Regen = new(161, "Resource_Regen_Stop_Regen", u3: 10, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Resource_Max_Percent_Bonus = new(162, "Resource_Max_Percent_Bonus", encodingType: GameAttributeEncoding.Float16, u3: 10, script: "Resource_Percent", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 16);
        public static readonly GameAttributeF Resource_Capacity_Used = new(163, "Resource_Capacity_Used", encodingType: GameAttributeEncoding.Float16Or32, u3: 10, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 0);
        public static readonly GameAttributeF Resource_Effective_Max = new(164, "Resource_Effective_Max", encodingType: GameAttributeEncoding.Float16Or32, u3: 10, script: "Resource_Max_Total-Resource_Capacity_Used", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 0);
        public static readonly GameAttributeF Resource_Regen_Percent_Per_Second = new(165, "Resource_Regen_Percent_Per_Second", encodingType: GameAttributeEncoding.Float16Or32, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 0);
        public static readonly GameAttributeF Resource_Degeneration_Stop_Point = new(166, "Resource_Degeneration_Stop_Point", encodingType: GameAttributeEncoding.Float16Or32, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 0);
        public static readonly GameAttributeI Highest_Solo_Rift_Level = new(167, "Highest_Solo_Rift_Level", max: 511, bitCount: 9);
        public static readonly GameAttributeI Highest_Unlocked_Rift_Level = new(168, "Highest_Unlocked_Rift_Level", defaultValue: 13, max: 511, bitCount: 9);
        public static readonly GameAttributeI Last_Rift_Started_Level = new(169, "Last_Rift_Started_Level", max: 511, bitCount: 9);
        public static readonly GameAttributeI Highest_Hero_Solo_Rift_Level = new(170, "Highest_Hero_Solo_Rift_Level", max: 511, bitCount: 9);
        public static readonly GameAttributeF Movement_Scalar = new(171, "Movement_Scalar", encodingType: GameAttributeEncoding.Float16, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 16);
        public static readonly GameAttributeF Walking_Rate = new(172, "Walking_Rate", encodingType: GameAttributeEncoding.Float16, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 16);
        public static readonly GameAttributeF Running_Rate = new(173, "Running_Rate", encodingType: GameAttributeEncoding.Float16, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 16);
        public static readonly GameAttributeF Sprinting_Rate = new(174, "Sprinting_Rate", encodingType: GameAttributeEncoding.Float16, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 16);
        public static readonly GameAttributeF Strafing_Rate = new(175, "Strafing_Rate", encodingType: GameAttributeEncoding.Float16, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 16);
        public static readonly GameAttributeF Walking_Rate_Total = new(176, "Walking_Rate_Total", encodingType: GameAttributeEncoding.Float16, script: "Walking_Rate * Movement_Scalar_Total", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 16);
        public static readonly GameAttributeF Running_Rate_Total = new(177, "Running_Rate_Total", encodingType: GameAttributeEncoding.Float16, script: "Running_Rate * Movement_Scalar_Total", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 16);
        public static readonly GameAttributeF Last_Running_Rate = new(178, "Last_Running_Rate", encodingType: GameAttributeEncoding.Float16, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 16);
        public static readonly GameAttributeF Sprinting_Rate_Total = new(179, "Sprinting_Rate_Total", encodingType: GameAttributeEncoding.Float16, script: "Sprinting_Rate * Movement_Scalar_Total", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 16);
        public static readonly GameAttributeF Strafing_Rate_Total = new(180, "Strafing_Rate_Total", encodingType: GameAttributeEncoding.Float16, script: "Strafing_Rate * Movement_Scalar_Total", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 16);
        public static readonly GameAttributeF Movement_Bonus_Total = new(181, "Movement_Bonus_Total", encodingType: GameAttributeEncoding.Float16, script: "Movement_Bonus_Run_Speed", flags: (ReplicationFlags)222, bitCount: 16); // FIXME: incorrect flags
        public static readonly GameAttributeF Movement_Scalar_Subtotal = new(182, "Movement_Scalar_Subtotal", encodingType: GameAttributeEncoding.Float16, script: "Max(0.1, Movement_Scalar) * (1 + Movement_Bonus_Total) * (1-Movement_Scalar_Reduction_Percent * (1-Min(1, Movement_Scalar_Reduction_Resistance)))", flags: (ReplicationFlags)222, bitCount: 16); // FIXME: incorrect flags
        public static readonly GameAttributeF Movement_Scalar_Capped_Total = new(183, "Movement_Scalar_Capped_Total", encodingType: GameAttributeEncoding.Float16, script: "Min(Movement_Scalar_Cap, Movement_Scalar_Subtotal)", flags: (ReplicationFlags)222, bitCount: 16); // FIXME: incorrect flags
        public static readonly GameAttributeF Movement_Scalar_Uncapped_Bonus = new(184, "Movement_Scalar_Uncapped_Bonus", encodingType: GameAttributeEncoding.Float16, flags: (ReplicationFlags)222, bitCount: 16); // FIXME: incorrect flags
        public static readonly GameAttributeF Movement_Scalar_Total = new(185, "Movement_Scalar_Total", script: "Movement_Scalar_Capped_Total + Movement_Scalar_Uncapped_Bonus", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Movement_Bonus_Run_Speed = new(186, "Movement_Bonus_Run_Speed", encodingType: GameAttributeEncoding.Float16, flags: (ReplicationFlags)222, bitCount: 16); // FIXME: incorrect flags
        public static readonly GameAttributeF Movement_Scalar_Cap = new(187, "Movement_Scalar_Cap", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Casting_Speed = new(188, "Casting_Speed", encodingType: GameAttributeEncoding.Float16, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 16);
        public static readonly GameAttributeF Casting_Speed_Bonus = new(189, "Casting_Speed_Bonus", encodingType: GameAttributeEncoding.Float16, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 16);
        public static readonly GameAttributeF Casting_Speed_Total = new(190, "Casting_Speed_Total", encodingType: GameAttributeEncoding.Float16, script: "(Casting_Speed + Casting_Speed_Bonus) * Max(0.1, 1 + Casting_Speed_Percent)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 16);
        public static readonly GameAttributeB Always_Hits = new(191, "Always_Hits");
        public static readonly GameAttributeF Hit_Chance = new(192, "Hit_Chance", encodingType: GameAttributeEncoding.Float16, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 16);
        public static readonly GameAttributeF Knockback_Attack_Scalar = new(193, "Knockback_Attack_Scalar", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Attacks_Per_Second_Item = new(194, "Attacks_Per_Second_Item", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Attacks_Per_Second_Item_Percent = new(195, "Attacks_Per_Second_Item_Percent", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Attacks_Per_Second_Item_Subtotal = new(196, "Attacks_Per_Second_Item_Subtotal", script: "Attacks_Per_Second_Item * (1 + Attacks_Per_Second_Item_Percent)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Attacks_Per_Second_Item_Bonus = new(197, "Attacks_Per_Second_Item_Bonus", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Attacks_Per_Second_Item_Total = new(198, "Attacks_Per_Second_Item_Total", script: "(Attacks_Per_Second_Item_Subtotal + Attacks_Per_Second_Item_Bonus)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Attacks_Per_Second = new(199, "Attacks_Per_Second", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Attacks_Per_Second_Bonus = new(200, "Attacks_Per_Second_Bonus", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Attacks_Per_Second_Total = new(201, "Attacks_Per_Second_Total", script: "Min(5.0,  Max(0.01,  (((Attacks_Per_Second_Item_CurrentHand > 0.0) ? Attacks_Per_Second_Item_CurrentHand : Attacks_Per_Second) + Attacks_Per_Second_Bonus + Attacks_Per_Second_Item_Bonus) * Attacks_Per_Second_Percent_Subtotal))", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Attacks_Per_Second_Percent_Cap = new(202, "Attacks_Per_Second_Percent_Cap", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Attacks_Per_Second_Percent = new(203, "Attacks_Per_Second_Percent", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Attacks_Per_Second_Percent_Uncapped = new(204, "Attacks_Per_Second_Percent_Uncapped", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Attacks_Per_Second_Percent_Reduction = new(205, "Attacks_Per_Second_Percent_Reduction", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Attacks_Per_Second_Percent_Subtotal = new(206, "Attacks_Per_Second_Percent_Subtotal", script: "Max(0.1, (1 + (Min(Attacks_Per_Second_Percent_Cap, Attacks_Per_Second_Percent)) + Attacks_Per_Second_Percent_Uncapped) * (1-Attacks_Per_Second_Percent_Reduction))", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF AI_Cooldown_Reduction_Percent = new(207, "AI_Cooldown_Reduction_Percent", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Power_Cooldown_Min_Time = new(208, "Power_Cooldown_Min_Time", encodingType: GameAttributeEncoding.Float16Or32, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 0);
        public static readonly GameAttributeF Power_Cooldown_Reduction_Percent = new(209, "Power_Cooldown_Reduction_Percent", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Power_Cooldown_Reduction_Percent_All = new(210, "Power_Cooldown_Reduction_Percent_All", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Power_Cooldown_Reduction_Percent_All_Capped = new(211, "Power_Cooldown_Reduction_Percent_All_Capped", encodingType: GameAttributeEncoding.Float16, script: "Power_Cooldown_Reduction_Percent_All", bitCount: 16);
        public static readonly GameAttributeF Damage_Delta = new(212, "Damage_Delta", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Damage_Delta_Total = new(213, "Damage_Delta_Total", script: "Max(Damage_Delta-Damage_Bonus_Min + Damage_Weapon_Delta_Total_CurrentHand, 0)");
        public static readonly GameAttributeF Damage_Min = new(214, "Damage_Min");
        public static readonly GameAttributeF Damage_Bonus_Min = new(215, "Damage_Bonus_Min");
        public static readonly GameAttributeF Damage_Min_Total = new(216, "Damage_Min_Total", script: "Damage_Min_Subtotal");
        public static readonly GameAttributeF Damage_Delta_Total_All = new(217, "Damage_Delta_Total_All");
        public static readonly GameAttributeF Damage_Min_Total_All = new(218, "Damage_Min_Total_All");
        public static readonly GameAttributeF Damage_Average_Total_All = new(219, "Damage_Average_Total_All");
        public static readonly GameAttributeF Damage_Min_Subtotal = new(220, "Damage_Min_Subtotal", script: "Damage_Min + Damage_Bonus_Min + Damage_Weapon_Min_Total_CurrentHand");
        public static readonly GameAttributeF Damage_Percent_All_From_Skills = new(221, "Damage_Percent_All_From_Skills");
        public static readonly GameAttributeF Damage_Weapon_Delta = new(222, "Damage_Weapon_Delta", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Damage_Weapon_Delta_SubTotal = new(223, "Damage_Weapon_Delta_SubTotal", script: "(Damage_Weapon_Delta > 0.0) ? (Max(1,  Damage_Weapon_Delta - Damage_Weapon_Bonus_Min)) : Damage_Weapon_Delta", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Damage_Weapon_Max = new(224, "Damage_Weapon_Max", script: "(Damage_Weapon_Min + Damage_Weapon_Delta)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Damage_Weapon_Max_Total = new(225, "Damage_Weapon_Max_Total", script: "(Damage_Weapon_Min_Total + Damage_Weapon_Delta_Total)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Damage_Weapon_Max_Total_All = new(226, "Damage_Weapon_Max_Total_All", script: "(Damage_Weapon_Max_Total#Physical + Damage_Weapon_Max_Total#Fire + Damage_Weapon_Max_Total#Cold + Damage_Weapon_Max_Total#Lightning + Damage_Weapon_Max_Total#Poison + Damage_Weapon_Max_Total#Arcane + Damage_Weapon_Max_Total#Holy)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Damage_Weapon_Delta_Total = new(227, "Damage_Weapon_Delta_Total", script: "Max((Damage_Weapon_Delta_SubTotal + Damage_Weapon_Bonus_Delta + Damage_Weapon_Bonus_Delta_X1) * (1 + Damage_Weapon_Percent_Total),  0)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Damage_Weapon_Delta_Total_All = new(228, "Damage_Weapon_Delta_Total_All", script: "(Damage_Weapon_Delta_Total#Physical + Damage_Weapon_Delta_Total#Fire + Damage_Weapon_Delta_Total#Cold + Damage_Weapon_Delta_Total#Lightning + Damage_Weapon_Delta_Total#Poison + Damage_Weapon_Delta_Total#Arcane + Damage_Weapon_Delta_Total#Holy)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Damage_Weapon_Bonus_Delta = new(229, "Damage_Weapon_Bonus_Delta", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Damage_Weapon_Bonus_Delta_X1 = new(230, "Damage_Weapon_Bonus_Delta_X1", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Damage_Weapon_Min = new(231, "Damage_Weapon_Min", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Damage_Weapon_Min_Total = new(232, "Damage_Weapon_Min_Total", script: "(Damage_Weapon_Min + Damage_Weapon_Bonus_Min + Damage_Weapon_Bonus_Min_X1 + Damage_Weapon_Bonus_Flat) * (1 + Damage_Weapon_Percent_Total)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Damage_Weapon_Min_Total_All = new(233, "Damage_Weapon_Min_Total_All", script: "(Damage_Weapon_Min_Total#Physical + Damage_Weapon_Min_Total#Fire + Damage_Weapon_Min_Total#Cold + Damage_Weapon_Min_Total#Lightning + Damage_Weapon_Min_Total#Poison + Damage_Weapon_Min_Total#Arcane + Damage_Weapon_Min_Total#Holy)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Damage_Weapon_Average = new(234, "Damage_Weapon_Average", script: "(Damage_Weapon_Min + (Damage_Weapon_Delta/2))", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Damage_Weapon_Average_Total = new(235, "Damage_Weapon_Average_Total", script: "(Damage_Weapon_Min_Total + (Damage_Weapon_Delta_Total/2))", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Damage_Weapon_Average_Total_All = new(236, "Damage_Weapon_Average_Total_All", script: "(Damage_Weapon_Min_Total_All + (Damage_Weapon_Delta_Total_All/2))", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Damage_Weapon_Bonus_Min = new(237, "Damage_Weapon_Bonus_Min");
        public static readonly GameAttributeF Damage_Weapon_Bonus_Min_X1 = new(238, "Damage_Weapon_Bonus_Min_X1");
        public static readonly GameAttributeF Damage_Weapon_Bonus_Flat = new(239, "Damage_Weapon_Bonus_Flat");
        public static readonly GameAttributeF Damage_Weapon_Percent_Bonus = new(240, "Damage_Weapon_Percent_Bonus");
        public static readonly GameAttributeF Damage_Weapon_Percent_All = new(241, "Damage_Weapon_Percent_All");
        public static readonly GameAttributeF Damage_Weapon_Percent_Total = new(242, "Damage_Weapon_Percent_Total");
        public static readonly GameAttributeF Damage_Type_Percent_Bonus = new(243, "Damage_Type_Percent_Bonus");
        public static readonly GameAttributeF Damage_Dealt_Percent_Bonus = new(244, "Damage_Dealt_Percent_Bonus");
        public static readonly GameAttributeF Damage_Percent_Bonus_Barbarian = new(245, "Damage_Percent_Bonus_Barbarian");
        public static readonly GameAttributeF Damage_Percent_Bonus_Crusader = new(246, "Damage_Percent_Bonus_Crusader");
        public static readonly GameAttributeF Damage_Percent_Bonus_Demonhunter = new(247, "Damage_Percent_Bonus_Demonhunter");
        public static readonly GameAttributeF Damage_Percent_Bonus_Monk = new(248, "Damage_Percent_Bonus_Monk");
        public static readonly GameAttributeF Damage_Percent_Bonus_Necromancer = new(249, "Damage_Percent_Bonus_Necromancer");
        public static readonly GameAttributeF Damage_Percent_Bonus_Witchdoctor = new(250, "Damage_Percent_Bonus_Witchdoctor");
        public static readonly GameAttributeF Damage_Percent_Bonus_Wizard = new(251, "Damage_Percent_Bonus_Wizard");
        public static readonly GameAttributeF Crit_Percent_Base = new(252, "Crit_Percent_Base");
        public static readonly GameAttributeF Crit_Percent_Bonus_Capped = new(253, "Crit_Percent_Bonus_Capped");
        public static readonly GameAttributeF Crit_Percent_Bonus_Uncapped = new(254, "Crit_Percent_Bonus_Uncapped");
        public static readonly GameAttributeF Crit_Percent_Bonus_Hide_From_DPS = new(255, "Crit_Percent_Bonus_Hide_From_DPS");
        public static readonly GameAttributeF Crit_Percent_Cap = new(256, "Crit_Percent_Cap");
        public static readonly GameAttributeF Crit_Damage_Cap = new(257, "Crit_Damage_Cap");
        public static readonly GameAttributeF Crit_Damage_Percent = new(258, "Crit_Damage_Percent");
        public static readonly GameAttributeF Crit_Damage_Percent_Uncapped = new(259, "Crit_Damage_Percent_Uncapped");
        public static readonly GameAttributeF Crit_Effect_Time = new(260, "Crit_Effect_Time");
        public static readonly GameAttributeF Pierce_Chance = new(261, "Pierce_Chance", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Damage_Absorb_Percent = new(262, "Damage_Absorb_Percent", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Damage_Reduction_Total = new(263, "Damage_Reduction_Total", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Damage_Reduction_Current = new(264, "Damage_Reduction_Current", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeI Damage_Reduction_Last_Tick = new(265, "Damage_Reduction_Last_Tick");
        public static readonly GameAttributeF Block_Chance = new(266, "Block_Chance", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Block_Chance_Sub_Total = new(267, "Block_Chance_Sub_Total", encodingType: GameAttributeEncoding.Float16, script: "Min(1.0, Block_Chance + Block_Chance_Item_Total)", bitCount: 16);
        public static readonly GameAttributeF Block_Chance_Bonus_Item = new(268, "Block_Chance_Bonus_Item", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Block_Chance_Item = new(269, "Block_Chance_Item", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Block_Chance_Item_Total = new(270, "Block_Chance_Item_Total", encodingType: GameAttributeEncoding.Float16, script: "Block_Chance_Item + Block_Chance_Bonus_Item", bitCount: 16);
        public static readonly GameAttributeF Block_Chance_Uncapped_Bonus = new(271, "Block_Chance_Uncapped_Bonus", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Block_Chance_Capped_Total = new(272, "Block_Chance_Capped_Total", encodingType: GameAttributeEncoding.Float16, script: "Min(1.0, Block_Chance_Sub_Total + Block_Chance_Uncapped_Bonus)", bitCount: 16);
        public static readonly GameAttributeF Block_Amount = new(273, "Block_Amount", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Block_Amount_Bonus_Percent = new(274, "Block_Amount_Bonus_Percent", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Block_Amount_Total_Min = new(275, "Block_Amount_Total_Min", script: "(Block_Amount + Block_Amount_Item_Min + Block_Amount_Item_Bonus) * (1 + Block_Amount_Bonus_Percent)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Block_Amount_Total_Max = new(276, "Block_Amount_Total_Max", script: "(Block_Amount + Block_Amount_Item_Min + Block_Amount_Item_Delta + Block_Amount_Item_Bonus) * (1 + Block_Amount_Bonus_Percent)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Block_Amount_Item_Min = new(277, "Block_Amount_Item_Min", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Block_Amount_Item_Delta = new(278, "Block_Amount_Item_Delta", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Block_Amount_Item_Bonus = new(279, "Block_Amount_Item_Bonus", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Dodge_Chance_Bonus = new(280, "Dodge_Chance_Bonus", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Dodge_Chance_Bonus_Melee = new(281, "Dodge_Chance_Bonus_Melee", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Dodge_Chance_Bonus_Ranged = new(282, "Dodge_Chance_Bonus_Ranged", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Dodge_Chance_Bonus_Additive = new(283, "Dodge_Chance_Bonus_Additive");
        public static readonly GameAttributeF Dodge_Chance_Bonus_Hide_From_Toughness = new(284, "Dodge_Chance_Bonus_Hide_From_Toughness");
        public static readonly GameAttributeB Cannot_Dodge = new(285, "Cannot_Dodge", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Get_Hit_Current = new(286, "Get_Hit_Current", encodingType: GameAttributeEncoding.Float16Or32, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 0);
        public static readonly GameAttributeF Get_Hit_Max_Base = new(287, "Get_Hit_Max_Base", encodingType: GameAttributeEncoding.Float16Or32, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 0);
        public static readonly GameAttributeF Get_Hit_Max_Per_Level = new(288, "Get_Hit_Max_Per_Level", encodingType: GameAttributeEncoding.Float16Or32, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 0);
        public static readonly GameAttributeF Get_Hit_Max = new(289, "Get_Hit_Max", encodingType: GameAttributeEncoding.Float16Or32, script: "Get_Hit_Max_Base + (Get_Hit_Max_Per_Level * Level)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 0);
        public static readonly GameAttributeF Get_Hit_Recovery_Base = new(290, "Get_Hit_Recovery_Base", encodingType: GameAttributeEncoding.Float16Or32, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 0);
        public static readonly GameAttributeF Get_Hit_Recovery_Per_Level = new(291, "Get_Hit_Recovery_Per_Level", encodingType: GameAttributeEncoding.Float16Or32, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 0);
        public static readonly GameAttributeF Get_Hit_Recovery = new(292, "Get_Hit_Recovery", encodingType: GameAttributeEncoding.Float16Or32, script: "Get_Hit_Recovery_Base + (Get_Hit_Recovery_Per_Level * Level)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 0);
        public static readonly GameAttributeF Get_Hit_Damage = new(293, "Get_Hit_Damage", encodingType: GameAttributeEncoding.Float16Or32, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 0);
        public static readonly GameAttributeF Get_Hit_Damage_Scalar = new(294, "Get_Hit_Damage_Scalar", encodingType: GameAttributeEncoding.Float16Or32, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 0);
        public static readonly GameAttributeF Last_Damage_MainActor = new(295, "Last_Damage_MainActor", defaultValue: -1);
        public static readonly GameAttributeF Last_ACD_Attacked = new(296, "Last_ACD_Attacked", defaultValue: -1);
        public static readonly GameAttributeB Ignores_Critical_Hits = new(297, "Ignores_Critical_Hits");
        public static readonly GameAttributeB Immunity = new(298, "Immunity");
        public static readonly GameAttributeB Untargetable = new(299, "Untargetable", u4: 1, u5: 1, flags: (ReplicationFlags)222); // FIXME: incorrect flags
        public static readonly GameAttributeB Immobolize = new(300, "Immobolize", flags: ReplicationFlags.PlayerReplicated);
        public static readonly GameAttributeB Immune_To_Knockback = new(301, "Immune_To_Knockback", flags: ReplicationFlags.PlayerReplicated);
        public static readonly GameAttributeB Power_Immobilize = new(302, "Power_Immobilize");
        public static readonly GameAttributeF Stun_Chance = new(303, "Stun_Chance", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Stun_Length = new(304, "Stun_Length", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Stun_Recovery = new(305, "Stun_Recovery", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Stun_Recovery_Speed = new(306, "Stun_Recovery_Speed", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeB Stunned = new(307, "Stunned");
        public static readonly GameAttributeB Stun_Immune = new(308, "Stun_Immune");
        public static readonly GameAttributeF Poison_Length_Reduction = new(309, "Poison_Length_Reduction", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeB Bleeding = new(310, "Bleeding");
        public static readonly GameAttributeF Bleed_Duration = new(311, "Bleed_Duration", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeB Chilled = new(312, "Chilled");
        public static readonly GameAttributeF Freeze_Length_Reduction = new(313, "Freeze_Length_Reduction", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeB Freeze_Immune = new(314, "Freeze_Immune");
        public static readonly GameAttributeF Chill_Duration_Bonus_Percent = new(315, "Chill_Duration_Bonus_Percent", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Freeze_Duration_Bonus_Percent = new(316, "Freeze_Duration_Bonus_Percent", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Stun_Duration_Bonus_Percent = new(317, "Stun_Duration_Bonus_Percent", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Immobilize_Duration_Bonus_Percent = new(318, "Immobilize_Duration_Bonus_Percent", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Fear_Duration_Bonus_Percent = new(319, "Fear_Duration_Bonus_Percent", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Blind_Duration_Bonus_Percent = new(320, "Blind_Duration_Bonus_Percent", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Charm_Duration_Bonus_Percent = new(321, "Charm_Duration_Bonus_Percent", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Slow_Duration_Bonus_Percent = new(322, "Slow_Duration_Bonus_Percent", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeB Webbed = new(323, "Webbed");
        public static readonly GameAttributeB Slow = new(324, "Slow");
        public static readonly GameAttributeB FireAura = new(325, "FireAura");
        public static readonly GameAttributeB LightningAura = new(326, "LightningAura");
        public static readonly GameAttributeB ColdAura = new(327, "ColdAura");
        public static readonly GameAttributeB PoisonAura = new(328, "PoisonAura");
        public static readonly GameAttributeB Blind = new(329, "Blind");
        public static readonly GameAttributeB Enraged = new(330, "Enraged");
        public static readonly GameAttributeB Slowdown_Immune = new(331, "Slowdown_Immune");
        public static readonly GameAttributeB Gethit_Immune = new(332, "Gethit_Immune");
        public static readonly GameAttributeB AttackSpeed_Reduction_Immune = new(333, "AttackSpeed_Reduction_Immune");
        public static readonly GameAttributeF Suffocation_Per_Second = new(334, "Suffocation_Per_Second", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Suffocation_Unit_Value = new(335, "Suffocation_Unit_Value", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Thorns_Percent = new(336, "Thorns_Percent");
        public static readonly GameAttributeF Thorns_Percent_All = new(337, "Thorns_Percent_All");
        public static readonly GameAttributeF Thorns_Percent_Total = new(338, "Thorns_Percent_Total", script: "Thorns_Percent + Thorns_Percent_All#NONE");
        public static readonly GameAttributeF Thorns_Fixed = new(339, "Thorns_Fixed");
        public static readonly GameAttributeF Thorns_Fixed_Bonus_Percent = new(340, "Thorns_Fixed_Bonus_Percent");
        public static readonly GameAttributeF Thorns_Fixed_Total = new(341, "Thorns_Fixed_Total", script: "Thorns_Fixed * (1.0 + Thorns_Fixed_Bonus_Percent#NONE)");
        public static readonly GameAttributeF Thorns_AOE_Radius = new(342, "Thorns_AOE_Radius");
        public static readonly GameAttributeB Thorns_Has_Damage_Type = new(343, "Thorns_Has_Damage_Type");
        public static readonly GameAttributeF On_First_Hit_Thorns_Percent = new(344, "On_First_Hit_Thorns_Percent");
        public static readonly GameAttributeF Steal_Health_Percent = new(345, "Steal_Health_Percent");
        public static readonly GameAttributeF Steal_Mana_Percent = new(346, "Steal_Mana_Percent");
        public static readonly GameAttributeF Resource_On_Hit = new(347, "Resource_On_Hit", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Resource_On_Hit_Bonus_Pct = new(348, "Resource_On_Hit_Bonus_Pct", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Resource_On_Hit_Bonus = new(349, "Resource_On_Hit_Bonus", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Resource_On_Kill = new(350, "Resource_On_Kill", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Resource_On_Crit = new(351, "Resource_On_Crit", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Hitpoints_On_Hit = new(352, "Hitpoints_On_Hit", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Hitpoints_On_Kill = new(353, "Hitpoints_On_Kill", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Hitpoints_On_Kill_Reduction_Percent = new(354, "Hitpoints_On_Kill_Reduction_Percent", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Hitpoints_On_Kill_Total = new(355, "Hitpoints_On_Kill_Total", encodingType: GameAttributeEncoding.Float16Or32, script: "Hitpoints_On_Kill * Pin(1-Hitpoints_On_Kill_Reduction_Percent, 0, 2)", bitCount: 0);
        public static readonly GameAttributeF Damage_To_Mana = new(356, "Damage_To_Mana", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Last_Proc_Time = new(357, "Last_Proc_Time");
        public static readonly GameAttributeF Damage_Power_Delta = new(358, "Damage_Power_Delta", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Damage_Power_Min = new(359, "Damage_Power_Min", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Rope_Overlay = new(360, "Rope_Overlay", defaultValue: -1);
        public static readonly GameAttributeI General_Cooldown = new(361, "General_Cooldown", defaultValue: -1);
        public static readonly GameAttributeI Power_Cooldown = new(362, "Power_Cooldown", defaultValue: -1, flags: ReplicationFlags.PlayerReplicated);
        public static readonly GameAttributeI Power_Cooldown_Start = new(363, "Power_Cooldown_Start", defaultValue: int.MaxValue, flags: ReplicationFlags.PlayerReplicated);
        public static readonly GameAttributeI Proc_Cooldown = new(364, "Proc_Cooldown", flags: ReplicationFlags.PlayerReplicated);
        public static readonly GameAttributeI Emote_Cooldown = new(365, "Emote_Cooldown", flags: ReplicationFlags.PlayerReplicated);
        public static readonly GameAttributeF Projectile_Speed = new(366, "Projectile_Speed", encodingType: GameAttributeEncoding.Float16, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 16);
        public static readonly GameAttributeF Projectile_Speed_Increase_Percent = new(367, "Projectile_Speed_Increase_Percent", encodingType: GameAttributeEncoding.Float16, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 16);
        public static readonly GameAttributeB DestroyWhenPathBlocked = new(368, "DestroyWhenPathBlocked");
        public static readonly GameAttributeB Skill_Toggled_State = new(369, "Skill_Toggled_State", flags: ReplicationFlags.PlayerReplicated);
        public static readonly GameAttributeI Skill_Charges = new(370, "Skill_Charges", max: 99, flags: ReplicationFlags.PlayerReplicated, bitCount: 7);
        public static readonly GameAttributeI Next_Charge_Gained_time = new(371, "Next_Charge_Gained_time", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeI Recharge_Start_Time = new(372, "Recharge_Start_Time", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Act = new(373, "Act", defaultValue: -1, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeI Difficulty = new(374, "Difficulty", defaultValue: -1, min: -1, max: 6, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 3);
        public static readonly GameAttributeF Last_Damage_Amount = new(375, "Last_Damage_Amount", encodingType: GameAttributeEncoding.Float16Or32, defaultValue: -1, bitCount: 0);
        public static readonly GameAttributeB In_Knockback = new(376, "In_Knockback");
        public static readonly GameAttributeF Amplify_Damage_Type_Percent = new(377, "Amplify_Damage_Type_Percent", encodingType: GameAttributeEncoding.Float16, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 16);
        public static readonly GameAttributeF Amplify_Damage_Skill_Percent = new(378, "Amplify_Damage_Skill_Percent", encodingType: GameAttributeEncoding.Float16, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 16);
        public static readonly GameAttributeF Amplify_Damage_Percent = new(379, "Amplify_Damage_Percent", encodingType: GameAttributeEncoding.Float16, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 16);
        public static readonly GameAttributeI Durability_Cur = new(380, "Durability_Cur", u5: 1, flags: ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeI Durability_Max = new(381, "Durability_Max", u5: 1, flags: ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Durability_Last_Damage = new(382, "Durability_Last_Damage");
        public static readonly GameAttributeI Item_Quality_Level = new(383, "Item_Quality_Level", encodingType: GameAttributeEncoding.IntMinMax, defaultValue: -1, min: -1, max: 11, u4: 4, u5: 1, flags: ReplicationFlags.ItemReplicated, bitCount: 4);
        public static readonly GameAttributeI Item_Quality_Level_Identified = new(384, "Item_Quality_Level_Identified", encodingType: GameAttributeEncoding.IntMinMax, defaultValue: -1, min: -1, max: 11, u4: 4, u5: 1, flags: ReplicationFlags.ItemReplicated, bitCount: 4);
        public static readonly GameAttributeF Item_Cost_Percent_Bonus = new(385, "Item_Cost_Percent_Bonus", encodingType: GameAttributeEncoding.Float16, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 16);
        public static readonly GameAttributeB Item_Equipped = new(386, "Item_Equipped", flags: ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Ping = new(387, "Ping", defaultValue: -1, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Requirement = new(388, "Requirement", encodingType: GameAttributeEncoding.Float16, flags: ReplicationFlags.ItemReplicated, bitCount: 16);
        public static readonly GameAttributeF Requirements_Ease_Percent = new(389, "Requirements_Ease_Percent", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Requirement_When_Equipped = new(390, "Requirement_When_Equipped", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeI Sockets = new(391, "Sockets", max: 3, u5: 1, flags: ReplicationFlags.ItemReplicated, bitCount: 2);
        public static readonly GameAttributeI Sockets_Filled = new(392, "Sockets_Filled", max: 3, u5: 1, flags: ReplicationFlags.ItemReplicated, bitCount: 2);
        public static readonly GameAttributeF Stats_All_Bonus = new(393, "Stats_All_Bonus", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Item_Bound_To_ACD = new(394, "Item_Bound_To_ACD", defaultValue: -1);
        public static readonly GameAttributeF Item_Locked_To_ACD = new(395, "Item_Locked_To_ACD", defaultValue: -1);
        public static readonly GameAttributeI Item_Binding_Level_Override = new(396, "Item_Binding_Level_Override", max: 4, flags: ReplicationFlags.ItemReplicated, bitCount: 3);
        public static readonly GameAttributeF Item_LegendaryItem_Level_Override = new(397, "Item_LegendaryItem_Level_Override", flags: ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeI Item_Targeted_Player_Class = new(398, "Item_Targeted_Player_Class", defaultValue: -1, min: -1, max: 7, flags: ReplicationFlags.ItemReplicated, bitCount: 4);
        public static readonly GameAttributeI Item_Targeted_Hireling_Class = new(399, "Item_Targeted_Hireling_Class", max: 4, flags: ReplicationFlags.ItemReplicated, bitCount: 3);
        public static readonly GameAttributeI ItemStackQuantityHi = new(400, "ItemStackQuantityHi", u4: 4, u5: 1, flags: ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeI ItemStackQuantityLo = new(401, "ItemStackQuantityLo", u4: 4, u5: 1, flags: ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Run_Speed_Granted = new(402, "Run_Speed_Granted", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeI Run_Speed_Duration = new(403, "Run_Speed_Duration", max: 16777215, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 24);
        public static readonly GameAttributeF IdentifyCost = new(404, "IdentifyCost");
        public static readonly GameAttributeI Seed = new(405, "Seed", flags: ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeB IsCrafted = new(406, "IsCrafted", flags: ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeB IsVendorBought = new(407, "IsVendorBought", flags: ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeI DyeType = new(408, "DyeType", min: -1, max: 30, flags: ReplicationFlags.ItemReplicated, bitCount: 5);
        public static readonly GameAttributeB Loot_2_0_Drop = new(409, "Loot_2_0_Drop");
        public static readonly GameAttributeB Post_2_1_2_Drop = new(410, "Post_2_1_2_Drop");
        public static readonly GameAttributeB Post_2_1_3_Drop_ = new(411, "Post_2_1_3_Drop");
        public static readonly GameAttributeB Post_2_5_0_Drop = new(412, "Post_2_5_0_Drop");
        public static readonly GameAttributeI Ancient_Rank = new(413, "Ancient_Rank", max: 2, flags: ReplicationFlags.ItemReplicated, bitCount: 2);
        public static readonly GameAttributeB Unidentified = new(414, "Unidentified", flags: ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeB RemoveLevelReq = new(415, "RemoveLevelReq", flags: ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeB ConsumableAddSockets = new(416, "ConsumableAddSockets");
        public static readonly GameAttributeB AddSocketsType_Weapon = new(417, "AddSocketsType_Weapon");
        public static readonly GameAttributeB AddSocketsType_Offhand = new(418, "AddSocketsType_Offhand");
        public static readonly GameAttributeB AddSocketsType_Legs = new(419, "AddSocketsType_Legs");
        public static readonly GameAttributeB AddSocketsType_Chest = new(420, "AddSocketsType_Chest");
        public static readonly GameAttributeB AddSocketsType_Helm = new(421, "AddSocketsType_Helm");
        public static readonly GameAttributeB AddSocketsType_Jewelry = new(422, "AddSocketsType_Jewelry");
        public static readonly GameAttributeF EnchantedAffixOld = new(423, "EnchantedAffixOld", defaultValue: -1);
        public static readonly GameAttributeF EnchantedAffixNew = new(424, "EnchantedAffixNew", defaultValue: -1);
        public static readonly GameAttributeF EnchantedAffixSeed = new(425, "EnchantedAffixSeed");
        public static readonly GameAttributeF EnchantedAffixCount = new(426, "EnchantedAffixCount");
        public static readonly GameAttributeI TransmogGBID = new(427, "TransmogGBID", defaultValue: -1, flags: ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF TransmogGBIDTempOverride = new(428, "TransmogGBIDTempOverride", defaultValue: -1, flags: ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF HighlySalvageable = new(429, "HighlySalvageable");
        public static readonly GameAttributeF ItemUnlockTimeHi = new(430, "ItemUnlockTimeHi");
        public static readonly GameAttributeF ItemUnlockTimeLo = new(431, "ItemUnlockTimeLo");
        public static readonly GameAttributeF CubeEnchantedGemRank = new(432, "CubeEnchantedGemRank");
        public static readonly GameAttributeF CubeEnchantedGemType = new(433, "CubeEnchantedGemType");
        public static readonly GameAttributeF Cube_Enchanted_Strength_Item = new(434, "Cube_Enchanted_Strength_Item");
        public static readonly GameAttributeF Cube_Enchanted_Dexterity_Item = new(435, "Cube_Enchanted_Dexterity_Item");
        public static readonly GameAttributeF Cube_Enchanted_Intelligence_Item = new(436, "Cube_Enchanted_Intelligence_Item");
        public static readonly GameAttributeF Cube_Enchanted_Vitality_Item = new(437, "Cube_Enchanted_Vitality_Item");
        public static readonly GameAttributeB Always_Plays_GetHit = new(438, "Always_Plays_GetHit");
        public static readonly GameAttributeB Hidden = new(439, "Hidden", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Alpha_For_Other_Players = new(440, "Alpha_For_Other_Players", defaultValue: -1);
        public static readonly GameAttributeB AlphaAttachments = new(441, "AlphaAttachments");
        public static readonly GameAttributeF RActor_Fade_Group = new(442, "RActor_Fade_Group", defaultValue: -1);
        public static readonly GameAttributeF QuestRange = new(443, "QuestRange", defaultValue: -1);
        public static readonly GameAttributeI Attack_Cooldown_Min = new(444, "Attack_Cooldown_Min", max: 16777215, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 24);
        public static readonly GameAttributeI Attack_Cooldown_Delta = new(445, "Attack_Cooldown_Delta", max: 16777215, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 24);
        public static readonly GameAttributeI InitialCooldownMinTotal = new(446, "InitialCooldownMinTotal", max: 16777215, script: "InitialCooldownMin / Attacks_Per_Second_Total", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 24);
        public static readonly GameAttributeI InitialCooldownDeltaTotal = new(447, "InitialCooldownDeltaTotal", max: 16777215, script: "InitialCooldownDelta / Attacks_Per_Second_Total", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 24);
        public static readonly GameAttributeI Attack_Cooldown_Min_Total = new(448, "Attack_Cooldown_Min_Total", max: 16777215, script: "Attack_Cooldown_Min / Attacks_Per_Second_Total", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 24);
        public static readonly GameAttributeI Attack_Cooldown_Delta_Total = new(449, "Attack_Cooldown_Delta_Total", max: 16777215, script: "Attack_Cooldown_Delta / Attacks_Per_Second_Total", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 24);
        public static readonly GameAttributeI Closing_Cooldown_Min_Total = new(450, "Closing_Cooldown_Min_Total", max: 16777215, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 24);
        public static readonly GameAttributeI Closing_Cooldown_Delta_Total = new(451, "Closing_Cooldown_Delta_Total", max: 16777215, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 24);
        public static readonly GameAttributeB Quest_Monster = new(452, "Quest_Monster");
        public static readonly GameAttributeF Quest_MonsterEffect = new(453, "Quest_MonsterEffect", defaultValue: -1);
        public static readonly GameAttributeF Treasure_Class = new(454, "Treasure_Class", defaultValue: -1);
        public static readonly GameAttributeB Removes_Body_On_Death = new(455, "Removes_Body_On_Death");
        public static readonly GameAttributeI InitialCooldownMin = new(456, "InitialCooldownMin", max: 16777215, bitCount: 24);
        public static readonly GameAttributeI InitialCooldownDelta = new(457, "InitialCooldownDelta", max: 16777215, bitCount: 24);
        public static readonly GameAttributeF Knockback_Weight = new(458, "Knockback_Weight", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeB UntargetableByPets = new(459, "UntargetableByPets");
        public static readonly GameAttributeI Damage_State_Current = new(460, "Damage_State_Current", max: 15, bitCount: 4);
        public static readonly GameAttributeI Damage_State_Max = new(461, "Damage_State_Max", max: 15, bitCount: 4);
        public static readonly GameAttributeB Is_Player_Decoy = new(462, "Is_Player_Decoy");
        public static readonly GameAttributeF Custom_Target_Weight = new(463, "Custom_Target_Weight", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeI Gizmo_State = new(464, "Gizmo_State", encodingType: GameAttributeEncoding.IntMinMax, defaultValue: -1, min: -1, max: 30, u4: 3, u5: 1, flags: ReplicationFlags.GizmoReplicated, bitCount: 5);
        public static readonly GameAttributeI Gizmo_Charges = new(465, "Gizmo_Charges", min: -1, max: 30, u4: 1, u5: 1, flags: ReplicationFlags.GizmoReplicated, bitCount: 5);
        public static readonly GameAttributeB Chest_Open = new(466, "Chest_Open", flags: ReplicationFlags.GizmoReplicated);
        public static readonly GameAttributeB Door_Locked = new(467, "Door_Locked", flags: ReplicationFlags.GizmoReplicated);
        public static readonly GameAttributeF Door_Timer = new(468, "Door_Timer", defaultValue: -1);
        public static readonly GameAttributeB Gizmo_Disabled_By_Script = new(469, "Gizmo_Disabled_By_Script", flags: (ReplicationFlags)222); // FIXME: incorrect flags
        public static readonly GameAttributeI Gizmo_Operator_ACDID = new(470, "Gizmo_Operator_ACDID", defaultValue: -1, u4: 3, u5: 1, flags: ReplicationFlags.GizmoReplicated);
        public static readonly GameAttributeF Triggering_Count = new(471, "Triggering_Count");
        public static readonly GameAttributeF Gizmo_Operation_Radius_Override = new(472, "Gizmo_Operation_Radius_Override", encodingType: GameAttributeEncoding.Float16, u4: 1, flags: ReplicationFlags.GizmoReplicated, bitCount: 16);
        public static readonly GameAttributeF Gate_Position = new(473, "Gate_Position", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Gate_Velocity = new(474, "Gate_Velocity", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeB Gizmo_Has_Been_Operated = new(475, "Gizmo_Has_Been_Operated", u4: 1, u5: 1, flags: ReplicationFlags.GizmoReplicated);
        public static readonly GameAttributeB Banner_Usable = new(476, "Banner_Usable");
        public static readonly GameAttributeB Banner_Player_In_Combat = new(477, "Banner_Player_In_Combat");
        public static readonly GameAttributeI Pet_Owner = new(478, "Pet_Owner", defaultValue: -1, min: -1, max: 8, flags: (ReplicationFlags)222, bitCount: 4); // FIXME: incorrect flags
        public static readonly GameAttributeI Pet_Creator = new(479, "Pet_Creator", defaultValue: -1, min: -1, max: 8, flags: (ReplicationFlags)222, bitCount: 4); // FIXME: incorrect flags
        public static readonly GameAttributeI Pet_Type = new(480, "Pet_Type", defaultValue: -1, min: -1, max: 77, flags: (ReplicationFlags)222, bitCount: 7);
        public static readonly GameAttributeB DropsNoLoot = new(481, "DropsNoLoot");
        public static readonly GameAttributeB GrantsNoXP = new(482, "GrantsNoXP");
        public static readonly GameAttributeI Hireling_Class = new(483, "Hireling_Class", max: 4, flags: (ReplicationFlags)222, bitCount: 3); // FIXME: incorrect flags
        public static readonly GameAttributeF Summoned_By_SNO = new(484, "Summoned_By_SNO", defaultValue: -1);
        public static readonly GameAttributeF Pet_Proc_Scalar = new(485, "Pet_Proc_Scalar", defaultValue: 1065353216);
        public static readonly GameAttributeB Pet_Cannot_Be_Dismissed = new(486, "Pet_Cannot_Be_Dismissed");
        public static readonly GameAttributeB Is_NPC = new(487, "Is_NPC", u4: 1, u5: 1, flags: (ReplicationFlags)222); // FIXME: incorrect flags
        public static readonly GameAttributeB NPC_Is_Operatable = new(488, "NPC_Is_Operatable", u4: 1, u5: 1, flags: (ReplicationFlags)222); // FIXME: incorrect flags
        public static readonly GameAttributeB NPC_Is_Escorting = new(489, "NPC_Is_Escorting", u4: 1, u5: 1, flags: (ReplicationFlags)222); // FIXME: incorrect flags
        public static readonly GameAttributeB NPC_Has_Interact_Options = new(490, "NPC_Has_Interact_Options, u3: 12, u4: 1, u5: 1", flags: (ReplicationFlags)222); // FIXME: incorrect flags
        public static readonly GameAttributeI Conversation_Icon = new(491, "Conversation_Icon", defaultValue: -1, min: -1, max: 6, flags: (ReplicationFlags)222, bitCount: 3); // FIXME: incorrect flags
        public static readonly GameAttributeI Conversation_Icon_Override = new(492, "Conversation_Icon_Override", defaultValue: -1, min: -1, max: 6, flags: (ReplicationFlags)222, bitCount: 3); // FIXME: incorrect flags
        public static readonly GameAttributeF Callout_Cooldown = new(493, "Callout_Cooldown", defaultValue: -1);
        public static readonly GameAttributeF Banter_Cooldown = new(494, "Banter_Cooldown", defaultValue: -1);
        public static readonly GameAttributeF Conversation_Heard_Count = new(495, "Conversation_Heard_Count");
        public static readonly GameAttributeF Last_Tick_Shop_Entered = new(496, "Last_Tick_Shop_Entered", defaultValue: -1);
        public static readonly GameAttributeB Is_Helper = new(497, "Is_Helper");
        public static readonly GameAttributeF Axe = new(498, "Axe", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Axe2H = new(499, "Axe2H", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF ThrowingAxe = new(500, "ThrowingAxe", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF AxeAny = new(501, "AxeAny", script: "Pin(Axe + Axe2H + ThrowingAxe, 0, 1)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Bow = new(502, "Bow", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Crossbow = new(503, "Crossbow", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF BowAny = new(504, "BowAny", script: "Pin(Bow + Crossbow, 0, 1)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Club = new(505, "Club", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Club2H = new(506, "Club2H", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF ClubAny = new(507, "ClubAny", script: "Pin(Club + Club2H, 0, 1)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Dagger = new(508, "Dagger", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Mace = new(509, "Mace", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Mace2H = new(510, "Mace2H", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF MaceAny = new(511, "MaceAny", script: "Pin(Mace + Mace2H, 0, 1)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Sword = new(512, "Sword", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Sword2H = new(513, "Sword2H", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF SwordAny = new(514, "SwordAny", script: "Pin(Sword + Sword2H, 0, 1)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Polearm = new(515, "Polearm", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Spear = new(516, "Spear", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Wand = new(517, "Wand", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF ColdStaff = new(518, "ColdStaff", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF FireStaff = new(519, "FireStaff", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF LightningStaff = new(520, "LightningStaff", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF PoisonStaff = new(521, "PoisonStaff", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF StaffAny = new(522, "StaffAny", script: "Pin(ColdStaff + FireStaff + LightningStaff + PoisonStaff, 0, 1)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Weapon1H = new(523, "Weapon1H", script: "Pin(Axe + Club + Dagger + Mace + Sword + Wand, 0, 1)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Weapon2H = new(524, "Weapon2H", script: "Pin(Axe2H + BowAny + Club2H + Mace2H + Sword2H + Polearm + Spear + StaffAny, 0, 1)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF WeaponMelee = new(525, "WeaponMelee", script: "Pin(Axe + Axe2H + ClubAny + Dagger + MaceAny + SwordAny + Polearm + Spear + Wand + StaffAny, 0, 1)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF WeaponRanged = new(526, "WeaponRanged", script: "Pin(ThrowingAxe + BowAny, 0, 1)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Quiver = new(527, "Quiver", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Reincarnation_Buff = new(528, "Reincarnation_Buff", defaultValue: -1);
        public static readonly GameAttributeF Dead_Body_AnimTag = new(529, "Dead_Body_AnimTag", defaultValue: -1);
        public static readonly GameAttributeI Spawned_by_ACDID = new(530, "Spawned_by_ACDID", defaultValue: -1);
        public static readonly GameAttributeI Summoned_By_ACDID = new(531, "Summoned_By_ACDID", defaultValue: -1);
        public static readonly GameAttributeI Summoner_ID = new(532, "Summoner_ID", defaultValue: -1);
        public static readonly GameAttributeI Banner_ACDID = new(533, "Banner_ACDID", defaultValue: -1);
        public static readonly GameAttributeF Breakable_Shield_HP = new(534, "Breakable_Shield_HP", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeI Current_WeaponClass = new(535, "Current_WeaponClass", defaultValue: -1, min: -1, max: 28, bitCount: 5);
        public static readonly GameAttributeB Weapons_Sheathed = new(536, "Weapons_Sheathed");
        public static readonly GameAttributeB Held_In_OffHand = new(537, "Held_In_OffHand");
        public static readonly GameAttributeF Attacks_Per_Second_Item_MainHand = new(538, "Attacks_Per_Second_Item_MainHand", script: "(Held_In_OffHand ? 0 : Attacks_Per_Second_Item_Subtotal )", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Attacks_Per_Second_Item_OffHand = new(539, "Attacks_Per_Second_Item_OffHand", script: "(Held_In_OffHand ? Attacks_Per_Second_Item_Subtotal : 0)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Attacks_Per_Second_Item_Total_MainHand = new(540, "Attacks_Per_Second_Item_Total_MainHand", script: "Attacks_Per_Second_Item_MainHand + Attacks_Per_Second_Item_Bonus", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Attacks_Per_Second_Item_Total_OffHand = new(541, "Attacks_Per_Second_Item_Total_OffHand", script: "Attacks_Per_Second_Item_OffHand + Attacks_Per_Second_Item_Bonus", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Damage_Weapon_Min_Total_MainHand = new(542, "Damage_Weapon_Min_Total_MainHand", script: "(Held_In_OffHand#NONE ? 0 : Damage_Weapon_Min_Total )", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Damage_Weapon_Min_Total_OffHand = new(543, "Damage_Weapon_Min_Total_OffHand", script: "(Held_In_OffHand#NONE ? Damage_Weapon_Min_Total : 0)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Damage_Weapon_Delta_Total_MainHand = new(544, "Damage_Weapon_Delta_Total_MainHand", script: "(Held_In_OffHand#NONE ? 0 : Damage_Weapon_Delta_Total )", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Damage_Weapon_Delta_Total_OffHand = new(545, "Damage_Weapon_Delta_Total_OffHand", script: "(Held_In_OffHand#NONE ? Damage_Weapon_Delta_Total : 0)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Attacks_Per_Second_Item_CurrentHand = new(546, "Attacks_Per_Second_Item_CurrentHand", script: "(DualWield_Hand ? Attacks_Per_Second_Item_OffHand : Attacks_Per_Second_Item_MainHand)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Damage_Weapon_Min_Total_CurrentHand = new(547, "Damage_Weapon_Min_Total_CurrentHand", script: "(DualWield_Hand#NONE ? Damage_Weapon_Min_Total_OffHand : Damage_Weapon_Min_Total_MainHand)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Damage_Weapon_Delta_Total_CurrentHand = new(548, "Damage_Weapon_Delta_Total_CurrentHand", script: "(DualWield_Hand#NONE ? Damage_Weapon_Delta_Total_OffHand : Damage_Weapon_Delta_Total_MainHand)", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeF Has_Special_Death_AnimTag = new(549, "Has_Special_Death_AnimTag", defaultValue: -1);
        public static readonly GameAttributeF Death_Type_Override = new(550, "Death_Type_Override", defaultValue: -1);
        public static readonly GameAttributeB In_Combat = new(551, "In_Combat");
        public static readonly GameAttributeB In_Combat_Next_Tick_Check = new(552, "In_Combat_Next_Tick_Check");
        public static readonly GameAttributeB In_Conversation = new(553, "In_Conversation");
        public static readonly GameAttributeF Last_Tick_Potion_Used = new(554, "Last_Tick_Potion_Used", defaultValue: -1);
        public static readonly GameAttributeF Potion_Dilution_Percent = new(555, "Potion_Dilution_Percent", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Out_Of_Combat_Health_Regen_Percent = new(556, "Out_Of_Combat_Health_Regen_Percent", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Out_Of_Combat_Mana_Regen_Percent = new(557, "Out_Of_Combat_Mana_Regen_Percent", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeI Potion_Dilution_Duration = new(558, "Potion_Dilution_Duration", defaultValue: -1, min: -1, max: 16777214, bitCount: 24);
        public static readonly GameAttributeF Potion_Dilution_Scalar = new(559, "Potion_Dilution_Scalar", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeB Feared = new(560, "Feared");
        public static readonly GameAttributeB Fear_Immune = new(561, "Fear_Immune");
        public static readonly GameAttributeF Last_Damage_ACD = new(562, "Last_Damage_ACD", defaultValue: -1);
        public static readonly GameAttributeF Attached_To_ACD = new(563, "Attached_To_ACD", defaultValue: -1);
        public static readonly GameAttributeF Attachment_ACD = new(564, "Attachment_ACD", defaultValue: -1);
        public static readonly GameAttributeF Normal_Attack_Replacement_Power_SNO = new(565, "Normal_Attack_Replacement_Power_SNO", defaultValue: -1);
        public static readonly GameAttributeI Damage_Type_Override = new(566, "Damage_Type_Override", defaultValue: -1, min: -1, max: 6, bitCount: 3);
        public static readonly GameAttributeF Minion_Count_Bonus_Percent = new(567, "Minion_Count_Bonus_Percent", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Expensive_Proc_Count = new(568, "Expensive_Proc_Count");
        public static readonly GameAttributeF Post_260A_Legendary_Gem_Cap = new(569, "Post_260A_Legendary_Gem_Cap");
        public static readonly GameAttributeB Pet_Dont_Kill_When_Entering_Rifts = new(570, "Pet_Dont_Kill_When_Entering_Rifts");
        public static readonly GameAttributeF Champion_Clone_Next_Tick = new(571, "Champion_Clone_Next_Tick");
        public static readonly GameAttributeF Champion_Clone_Time_Min_In_Seconds = new(572, "Champion_Clone_Time_Min_In_Seconds", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Champion_Clone_Time_Delta_In_Seconds = new(573, "Champion_Clone_Time_Delta_In_Seconds", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Champion_Clone_Hitpoint_Bonus_Percent = new(574, "Champion_Clone_Hitpoint_Bonus_Percent", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Champion_Clone_Damage_Bonus_Percent = new(575, "Champion_Clone_Damage_Bonus_Percent", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Champion_Ghostly_Next_Tick = new(576, "Champion_Ghostly_Next_Tick");
        public static readonly GameAttributeF Champion_Ghostly_Inactive_Time_Min_In_Seconds = new(577, "Champion_Ghostly_Inactive_Time_Min_In_Seconds", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Champion_Ghostly_Inactive_Time_Delta_In_Seconds = new(578, "Champion_Ghostly_Inactive_Time_Delta_In_Seconds", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Champion_Ghostly_Active_Time_Min_In_Seconds = new(579, "Champion_Ghostly_Active_Time_Min_In_Seconds", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Champion_Ghostly_Active_Time_Delta_In_Seconds = new(580, "Champion_Ghostly_Active_Time_Delta_In_Seconds", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Champion_Ghostly_Saved_Dodge_Chance = new(581, "Champion_Ghostly_Saved_Dodge_Chance", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeB Champion_Ghostly = new(582, "Champion_Ghostly");
        public static readonly GameAttributeI Base_Element = new(583, "Base_Element", defaultValue: -1, min: -1, max: 7, bitCount: 4);
        public static readonly GameAttributeF Projectile_Amount_Bonus_Percent = new(584, "Projectile_Amount_Bonus_Percent", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Projectile_Reflect_Chance = new(585, "Projectile_Reflect_Chance", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Projectile_Reflect_Forced_Target = new(586, "Projectile_Reflect_Forced_Target", defaultValue: -1);
        public static readonly GameAttributeF Projectile_Reflect_Damage_Scalar = new(587, "Projectile_Reflect_Damage_Scalar", defaultValue: 1065353216);
        public static readonly GameAttributeB Projectile_Reflect_Has_Damage_Cap = new(588, "Projectile_Reflect_Has_Damage_Cap");
        public static readonly GameAttributeF Projectile_Reflect_Damage_Cap_Remaining = new(589, "Projectile_Reflect_Damage_Cap_Remaining");
        public static readonly GameAttributeF Attack_Fear_Chance = new(590, "Attack_Fear_Chance", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Attack_Fear_Time_Min = new(591, "Attack_Fear_Time_Min", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Attack_Fear_Time_Delta = new(592, "Attack_Fear_Time_Delta", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeB Buff_Visual_Effect = new(593, "Buff_Visual_Effect", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeI Buff_Icon_Start_Tick0 = new(594, "Buff_Icon_Start_Tick0");
        public static readonly GameAttributeI Buff_Icon_Start_Tick1 = new(595, "Buff_Icon_Start_Tick1");
        public static readonly GameAttributeI Buff_Icon_Start_Tick2 = new(596, "Buff_Icon_Start_Tick2");
        public static readonly GameAttributeI Buff_Icon_Start_Tick3 = new(597, "Buff_Icon_Start_Tick3");
        public static readonly GameAttributeI Buff_Icon_Start_Tick4 = new(598, "Buff_Icon_Start_Tick4");
        public static readonly GameAttributeI Buff_Icon_Start_Tick5 = new(599, "Buff_Icon_Start_Tick5");
        public static readonly GameAttributeI Buff_Icon_Start_Tick6 = new(600, "Buff_Icon_Start_Tick6");
        public static readonly GameAttributeI Buff_Icon_Start_Tick7 = new(601, "Buff_Icon_Start_Tick7");
        public static readonly GameAttributeI Buff_Icon_Start_Tick8 = new(602, "Buff_Icon_Start_Tick8");
        public static readonly GameAttributeI Buff_Icon_Start_Tick9 = new(603, "Buff_Icon_Start_Tick9");
        public static readonly GameAttributeI Buff_Icon_Start_Tick10 = new(604, "Buff_Icon_Start_Tick10");
        public static readonly GameAttributeI Buff_Icon_Start_Tick11 = new(605, "Buff_Icon_Start_Tick11");
        public static readonly GameAttributeI Buff_Icon_Start_Tick12 = new(606, "Buff_Icon_Start_Tick12");
        public static readonly GameAttributeI Buff_Icon_Start_Tick13 = new(607, "Buff_Icon_Start_Tick13");
        public static readonly GameAttributeI Buff_Icon_Start_Tick14 = new(608, "Buff_Icon_Start_Tick14");
        public static readonly GameAttributeI Buff_Icon_Start_Tick15 = new(609, "Buff_Icon_Start_Tick15");
        public static readonly GameAttributeI Buff_Icon_Start_Tick16 = new(610, "Buff_Icon_Start_Tick16");
        public static readonly GameAttributeI Buff_Icon_Start_Tick17 = new(611, "Buff_Icon_Start_Tick17");
        public static readonly GameAttributeI Buff_Icon_Start_Tick18 = new(612, "Buff_Icon_Start_Tick18");
        public static readonly GameAttributeI Buff_Icon_Start_Tick19 = new(613, "Buff_Icon_Start_Tick19");
        public static readonly GameAttributeI Buff_Icon_Start_Tick20 = new(614, "Buff_Icon_Start_Tick20");
        public static readonly GameAttributeI Buff_Icon_Start_Tick21 = new(615, "Buff_Icon_Start_Tick21");
        public static readonly GameAttributeI Buff_Icon_Start_Tick22 = new(616, "Buff_Icon_Start_Tick22");
        public static readonly GameAttributeI Buff_Icon_Start_Tick23 = new(617, "Buff_Icon_Start_Tick23");
        public static readonly GameAttributeI Buff_Icon_Start_Tick24 = new(618, "Buff_Icon_Start_Tick24");
        public static readonly GameAttributeI Buff_Icon_Start_Tick25 = new(619, "Buff_Icon_Start_Tick25");
        public static readonly GameAttributeI Buff_Icon_Start_Tick26 = new(620, "Buff_Icon_Start_Tick26");
        public static readonly GameAttributeI Buff_Icon_Start_Tick27 = new(621, "Buff_Icon_Start_Tick27");
        public static readonly GameAttributeI Buff_Icon_Start_Tick28 = new(622, "Buff_Icon_Start_Tick28");
        public static readonly GameAttributeI Buff_Icon_Start_Tick29 = new(623, "Buff_Icon_Start_Tick29");
        public static readonly GameAttributeI Buff_Icon_Start_Tick30 = new(624, "Buff_Icon_Start_Tick30");
        public static readonly GameAttributeI Buff_Icon_Start_Tick31 = new(625, "Buff_Icon_Start_Tick31");
        public static readonly GameAttributeI Buff_Icon_End_Tick0 = new(626, "Buff_Icon_End_Tick0");
        public static readonly GameAttributeI Buff_Icon_End_Tick1 = new(627, "Buff_Icon_End_Tick1");
        public static readonly GameAttributeI Buff_Icon_End_Tick2 = new(628, "Buff_Icon_End_Tick2");
        public static readonly GameAttributeI Buff_Icon_End_Tick3 = new(629, "Buff_Icon_End_Tick3");
        public static readonly GameAttributeI Buff_Icon_End_Tick4 = new(630, "Buff_Icon_End_Tick4");
        public static readonly GameAttributeI Buff_Icon_End_Tick5 = new(631, "Buff_Icon_End_Tick5");
        public static readonly GameAttributeI Buff_Icon_End_Tick6 = new(632, "Buff_Icon_End_Tick6");
        public static readonly GameAttributeI Buff_Icon_End_Tick7 = new(633, "Buff_Icon_End_Tick7");
        public static readonly GameAttributeI Buff_Icon_End_Tick8 = new(634, "Buff_Icon_End_Tick8");
        public static readonly GameAttributeI Buff_Icon_End_Tick9 = new(635, "Buff_Icon_End_Tick9");
        public static readonly GameAttributeI Buff_Icon_End_Tick10 = new(636, "Buff_Icon_End_Tick10");
        public static readonly GameAttributeI Buff_Icon_End_Tick11 = new(637, "Buff_Icon_End_Tick11");
        public static readonly GameAttributeI Buff_Icon_End_Tick12 = new(638, "Buff_Icon_End_Tick12");
        public static readonly GameAttributeI Buff_Icon_End_Tick13 = new(639, "Buff_Icon_End_Tick13");
        public static readonly GameAttributeI Buff_Icon_End_Tick14 = new(640, "Buff_Icon_End_Tick14");
        public static readonly GameAttributeI Buff_Icon_End_Tick15 = new(641, "Buff_Icon_End_Tick15");
        public static readonly GameAttributeI Buff_Icon_End_Tick16 = new(642, "Buff_Icon_End_Tick16");
        public static readonly GameAttributeI Buff_Icon_End_Tick17 = new(643, "Buff_Icon_End_Tick17");
        public static readonly GameAttributeI Buff_Icon_End_Tick18 = new(644, "Buff_Icon_End_Tick18");
        public static readonly GameAttributeI Buff_Icon_End_Tick19 = new(645, "Buff_Icon_End_Tick19");
        public static readonly GameAttributeI Buff_Icon_End_Tick20 = new(646, "Buff_Icon_End_Tick20");
        public static readonly GameAttributeI Buff_Icon_End_Tick21 = new(647, "Buff_Icon_End_Tick21");
        public static readonly GameAttributeI Buff_Icon_End_Tick22 = new(648, "Buff_Icon_End_Tick22");
        public static readonly GameAttributeI Buff_Icon_End_Tick23 = new(649, "Buff_Icon_End_Tick23");
        public static readonly GameAttributeI Buff_Icon_End_Tick24 = new(650, "Buff_Icon_End_Tick24");
        public static readonly GameAttributeI Buff_Icon_End_Tick25 = new(651, "Buff_Icon_End_Tick25");
        public static readonly GameAttributeI Buff_Icon_End_Tick26 = new(652, "Buff_Icon_End_Tick26");
        public static readonly GameAttributeI Buff_Icon_End_Tick27 = new(653, "Buff_Icon_End_Tick27");
        public static readonly GameAttributeI Buff_Icon_End_Tick28 = new(654, "Buff_Icon_End_Tick28");
        public static readonly GameAttributeI Buff_Icon_End_Tick29 = new(655, "Buff_Icon_End_Tick29");
        public static readonly GameAttributeI Buff_Icon_End_Tick30 = new(656, "Buff_Icon_End_Tick30");
        public static readonly GameAttributeI Buff_Icon_End_Tick31 = new(657, "Buff_Icon_End_Tick31");
        public static readonly GameAttributeB Could_Have_Ragdolled = new(658, "Could_Have_Ragdolled");
        public static readonly GameAttributeF Ambient_Damage_Effect_Last_Time = new(659, "Ambient_Damage_Effect_Last_Time");
        public static readonly GameAttributeF Scale_Bonus = new(660, "Scale_Bonus", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeB Scale_Bonus_Is_Immediate = new(661, "Scale_Bonus_Is_Immediate");
        public static readonly GameAttributeB Deleted_On_Server = new(662, "Deleted_On_Server");
        public static readonly GameAttributeF Scripted_Fade_Time = new(663, "Scripted_Fade_Time");
        public static readonly GameAttributeB Does_No_Damage = new(664, "Does_No_Damage");
        public static readonly GameAttributeB Does_Fake_Damage = new(665, "Does_Fake_Damage");
        public static readonly GameAttributeF SlowTime_Debuff = new(666, "SlowTime_Debuff", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeB Blocks_Projectiles = new(667, "Blocks_Projectiles");
        public static readonly GameAttributeB Frozen = new(668, "Frozen");
        public static readonly GameAttributeF Freeze_Damage_Percent_Bonus = new(669, "Freeze_Damage_Percent_Bonus", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Shatter_Chance = new(670, "Shatter_Chance");
        public static readonly GameAttributeF DualWield_BothAttack_Chance = new(671, "DualWield_BothAttack_Chance", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Summon_Expiration_Tick = new(672, "Summon_Expiration_Tick");
        public static readonly GameAttributeF Summon_Count = new(673, "Summon_Count");
        public static readonly GameAttributeB Uninterruptible = new(674, "Uninterruptible");
        public static readonly GameAttributeB QueueDeath = new(675, "QueueDeath");
        public static readonly GameAttributeB CantStartDisplayedPowers = new(676, "CantStartDisplayedPowers");
        public static readonly GameAttributeB GizmosIgnoreCantStartDisplayedPowers = new(677, "GizmosIgnoreCantStartDisplayedPowers");
        public static readonly GameAttributeF Wizard_Slowtime_Proxy_ACD = new(678, "Wizard_Slowtime_Proxy_ACD", defaultValue: -1);
        public static readonly GameAttributeF DPS = new(679, "DPS", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Resurrection_Power = new(680, "Resurrection_Power", defaultValue: -1);
        public static readonly GameAttributeF Freeze_Damage = new(681, "Freeze_Damage", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Freeze_Capacity = new(682, "Freeze_Capacity", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Thaw_Rate = new(683, "Thaw_Rate", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Chilled_Dur_Bonus_Percent = new(684, "Chilled_Dur_Bonus_Percent", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF DOT_DPS = new(685, "DOT_DPS", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF DamageCap_Percent = new(686, "DamageCap_Percent", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Item_Time_Sold = new(687, "Item_Time_Sold");
        public static readonly GameAttributeF Forced_Hireling_Power = new(688, "Forced_Hireling_Power", defaultValue: -1);
        public static readonly GameAttributeB IsRooted = new(689, "IsRooted");
        public static readonly GameAttributeF RootTargetACD = new(690, "RootTargetACD", defaultValue: -1);
        public static readonly GameAttributeF RootAutoDecayPerSecond = new(691, "RootAutoDecayPerSecond", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF RootUnitValue = new(692, "RootUnitValue", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF RootTotalTicks = new(693, "RootTotalTicks");
        public static readonly GameAttributeB Hide_Affixes = new(694, "Hide_Affixes");
        public static readonly GameAttributeI Rune_A = new(695, "Rune_A", max: 255, bitCount: 8);
        public static readonly GameAttributeI Rune_B = new(696, "Rune_B", max: 255, bitCount: 8);
        public static readonly GameAttributeI Rune_C = new(697, "Rune_C", max: 255, bitCount: 8);
        public static readonly GameAttributeI Rune_D = new(698, "Rune_D", max: 255, bitCount: 8);
        public static readonly GameAttributeI Rune_E = new(699, "Rune_E", max: 255, bitCount: 8);
        public static readonly GameAttributeF Resistance_Stun = new(700, "Resistance_Stun", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Resistance_Stun_Total = new(701, "Resistance_Stun_Total", encodingType: GameAttributeEncoding.Float16, script: "Resistance_Stun + Resistance_StunRootFreeze", bitCount: 16);
        public static readonly GameAttributeF Resistance_Root = new(702, "Resistance_Root", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Resistance_Root_Total = new(703, "Resistance_Root_Total", encodingType: GameAttributeEncoding.Float16, script: "Resistance_Root + Resistance_StunRootFreeze", bitCount: 16);
        public static readonly GameAttributeF Resistance_Freeze = new(704, "Resistance_Freeze", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Resistance_Freeze_Total = new(705, "Resistance_Freeze_Total", encodingType: GameAttributeEncoding.Float16, script: "Resistance_Freeze + Resistance_StunRootFreeze", bitCount: 16);
        public static readonly GameAttributeF Resistance_StunRootFreeze = new(706, "Resistance_StunRootFreeze", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF CrowdControl_Reduction = new(707, "CrowdControl_Reduction", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeB Displays_Team_Effect = new(708, "Displays_Team_Effect");
        public static readonly GameAttributeB Cannot_Be_Added_To_AI_Target_List = new(709, "Cannot_Be_Added_To_AI_Target_List");
        public static readonly GameAttributeI SkillKit = new(710, "SkillKit", defaultValue: -1, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeB Immune_To_Charm = new(711, "Immune_To_Charm");
        public static readonly GameAttributeB Immune_To_Blind = new(712, "Immune_To_Blind");
        public static readonly GameAttributeB Damage_Shield = new(713, "Damage_Shield");
        public static readonly GameAttributeF Damage_Shield_Amount = new(714, "Damage_Shield_Amount");
        public static readonly GameAttributeF Guard_Object_ACDID = new(715, "Guard_Object_ACDID", defaultValue: -1);
        public static readonly GameAttributeF Follow_Target_ACDID = new(716, "Follow_Target_ACDID", defaultValue: -1);
        public static readonly GameAttributeI Follow_Target_Type = new(717, "Follow_Target_Type", max: 2, bitCount: 2);
        public static readonly GameAttributeF Forced_Enemy_ACDID = new(718, "Forced_Enemy_ACDID", defaultValue: -1);
        public static readonly GameAttributeF NPC_Talk_Target_ANN = new(719, "NPC_Talk_Target_ANN", defaultValue: -1);
        public static readonly GameAttributeF NPC_Conv_Target_ANN = new(720, "NPC_Conv_Target_ANN", defaultValue: -1);
        public static readonly GameAttributeF Script_Target_ACDID = new(721, "Script_Target_ACDID", defaultValue: -1);
        public static readonly GameAttributeF Look_Target_Server_ANN = new(722, "Look_Target_Server_ANN", defaultValue: -1);
        public static readonly GameAttributeF Look_Target_Broadcast_Intensity = new(723, "Look_Target_Broadcast_Intensity", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Look_Target_Broadcast_Radius = new(724, "Look_Target_Broadcast_Radius", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeB Stealthed = new(725, "Stealthed");
        public static readonly GameAttributeI GemQuality = new(726, "GemQuality", max: 32, bitCount: 6);
        public static readonly GameAttributeF Gem_Attributes_Multiplier = new(727, "Gem_Attributes_Multiplier", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF ItemBuffIcon = new(728, "ItemBuffIcon");
        public static readonly GameAttributeF ScrollDuration = new(729, "ScrollDuration", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Gizmo_Actor_SNO_To_Spawn = new(730, "Gizmo_Actor_SNO_To_Spawn", defaultValue: -1);
        public static readonly GameAttributeF Gizmo_Actor_To_Spawn_Scale = new(731, "Gizmo_Actor_To_Spawn_Scale", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Death_Replacement_Power_SNO = new(732, "Death_Replacement_Power_SNO", defaultValue: -1);
        public static readonly GameAttributeB Attachment_Handled_By_Client = new(733, "Attachment_Handled_By_Client");
        public static readonly GameAttributeB AI_In_Special_State = new(734, "AI_In_Special_State");
        public static readonly GameAttributeB AI_Used_Scripted_Spawn_Anim = new(735, "AI_Used_Scripted_Spawn_Anim");
        public static readonly GameAttributeB AI_Spawned_By_Inactive_Marker = new(736, "AI_Spawned_By_Inactive_Marker");
        public static readonly GameAttributeF Headstone_Player_ANN = new(737, "Headstone_Player_ANN", defaultValue: -1);
        public static readonly GameAttributeF Resource_Cost_Reduction_Percent = new(738, "Resource_Cost_Reduction_Percent", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Resource_Cost_Reduction_Percent_Total = new(739, "Resource_Cost_Reduction_Percent_Total");
        public static readonly GameAttributeF Resource_Cost_Reduction_Percent_All = new(740, "Resource_Cost_Reduction_Percent_All", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Damage_Type_Cost_Reduction_Percent = new(741, "Damage_Type_Cost_Reduction_Percent", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Resistance_Penetration = new(742, "Resistance_Penetration", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Resistance_Penetration_Total = new(743, "Resistance_Penetration_Total", encodingType: GameAttributeEncoding.Float16, script: "(Resistance_Penetration + Resistance_Penetration_All#NONE) * (Resistance_Penetration_Percent_All#NONE + 1)", bitCount: 16);
        public static readonly GameAttributeF Resistance_Penetration_All = new(744, "Resistance_Penetration_All", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Resistance_Penetration_Percent_All = new(745, "Resistance_Penetration_Percent_All", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Fury_Effect_Level = new(746, "Fury_Effect_Level");
        public static readonly GameAttributeF Health_Potion_Bonus_Heal_Percent = new(747, "Health_Potion_Bonus_Heal_Percent", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Health_Potion_Affects_Allies_Percent = new(748, "Health_Potion_Affects_Allies_Percent", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Free_Cast = new(749, "Free_Cast");
        public static readonly GameAttributeB Free_Cast_All = new(750, "Free_Cast_All");
        public static readonly GameAttributeF Health_Cost_Discount = new(751, "Health_Cost_Discount", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Health_Cost_Scalar = new(752, "Health_Cost_Scalar", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Frailty_Health_Threshold = new(753, "Frailty_Health_Threshold", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Frailty_Next_Application_Tick = new(754, "Frailty_Next_Application_Tick");
        public static readonly GameAttributeF Movement_Scalar_Reduction_Percent = new(755, "Movement_Scalar_Reduction_Percent", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Movement_Scalar_Reduction_Resistance = new(756, "Movement_Scalar_Reduction_Resistance", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Damage_Absorb_Percent_All = new(757, "Damage_Absorb_Percent_All", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF World_Seed = new(758, "World_Seed");
        public static readonly GameAttributeI Kill_Count_Record = new(759, "Kill_Count_Record", max: 16777215, bitCount: 24);
        public static readonly GameAttributeI Object_Destruction_Record = new(760, "Object_Destruction_Record", max: 16777215, bitCount: 24);
        public static readonly GameAttributeI Single_Attack_Record = new(761, "Single_Attack_Record", max: 16777215, bitCount: 24);
        public static readonly GameAttributeI Environment_Attack_Record = new(762, "Environment_Attack_Record", max: 16777215, bitCount: 24);
        public static readonly GameAttributeI Nephalem_Glory_Duration_Record = new(763, "Nephalem_Glory_Duration_Record", max: 16777215, bitCount: 24);
        public static readonly GameAttributeB Root_Immune = new(764, "Root_Immune");
        public static readonly GameAttributeF Monster_Play_Get_Hit_Bonus = new(765, "Monster_Play_Get_Hit_Bonus", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeI Stored_Contact_Frame = new(766, "Stored_Contact_Frame", max: 4, bitCount: 3);
        public static readonly GameAttributeI Buff_Icon_Count0 = new(767, "Buff_Icon_Count0", max: 16777215, bitCount: 24);
        public static readonly GameAttributeI Buff_Icon_Count1 = new(768, "Buff_Icon_Count1", max: 16777215, bitCount: 24);
        public static readonly GameAttributeI Buff_Icon_Count2 = new(769, "Buff_Icon_Count2", max: 16777215, bitCount: 24);
        public static readonly GameAttributeI Buff_Icon_Count3 = new(770, "Buff_Icon_Count3", max: 16777215, bitCount: 24);
        public static readonly GameAttributeI Buff_Icon_Count4 = new(771, "Buff_Icon_Count4", max: 16777215, bitCount: 24);
        public static readonly GameAttributeI Buff_Icon_Count5 = new(772, "Buff_Icon_Count5", max: 16777215, bitCount: 24);
        public static readonly GameAttributeI Buff_Icon_Count6 = new(773, "Buff_Icon_Count6", max: 16777215, bitCount: 24);
        public static readonly GameAttributeI Buff_Icon_Count7 = new(774, "Buff_Icon_Count7", max: 16777215, bitCount: 24);
        public static readonly GameAttributeI Buff_Icon_Count8 = new(775, "Buff_Icon_Count8", max: 16777215, bitCount: 24);
        public static readonly GameAttributeI Buff_Icon_Count9 = new(776, "Buff_Icon_Count9", max: 16777215, bitCount: 24);
        public static readonly GameAttributeI Buff_Icon_Count10 = new(777, "Buff_Icon_Count10", max: 16777215, bitCount: 24);
        public static readonly GameAttributeI Buff_Icon_Count11 = new(778, "Buff_Icon_Count11", max: 16777215, bitCount: 24);
        public static readonly GameAttributeI Buff_Icon_Count12 = new(779, "Buff_Icon_Count12", max: 16777215, bitCount: 24);
        public static readonly GameAttributeI Buff_Icon_Count13 = new(780, "Buff_Icon_Count13", max: 16777215, bitCount: 24);
        public static readonly GameAttributeI Buff_Icon_Count14 = new(781, "Buff_Icon_Count14", max: 16777215, bitCount: 24);
        public static readonly GameAttributeI Buff_Icon_Count15 = new(782, "Buff_Icon_Count15", max: 16777215, bitCount: 24);
        public static readonly GameAttributeI Buff_Icon_Count16 = new(783, "Buff_Icon_Count16", max: 16777215, bitCount: 24);
        public static readonly GameAttributeI Buff_Icon_Count17 = new(784, "Buff_Icon_Count17", max: 16777215, bitCount: 24);
        public static readonly GameAttributeI Buff_Icon_Count18 = new(785, "Buff_Icon_Count18", max: 16777215, bitCount: 24);
        public static readonly GameAttributeI Buff_Icon_Count19 = new(786, "Buff_Icon_Count19", max: 16777215, bitCount: 24);
        public static readonly GameAttributeI Buff_Icon_Count20 = new(787, "Buff_Icon_Count20", max: 16777215, bitCount: 24);
        public static readonly GameAttributeI Buff_Icon_Count21 = new(788, "Buff_Icon_Count21", max: 16777215, bitCount: 24);
        public static readonly GameAttributeI Buff_Icon_Count22 = new(789, "Buff_Icon_Count22", max: 16777215, bitCount: 24);
        public static readonly GameAttributeI Buff_Icon_Count23 = new(790, "Buff_Icon_Count23", max: 16777215, bitCount: 24);
        public static readonly GameAttributeI Buff_Icon_Count24 = new(791, "Buff_Icon_Count24", max: 16777215, bitCount: 24);
        public static readonly GameAttributeI Buff_Icon_Count25 = new(792, "Buff_Icon_Count25", max: 16777215, bitCount: 24);
        public static readonly GameAttributeI Buff_Icon_Count26 = new(793, "Buff_Icon_Count26", max: 16777215, bitCount: 24);
        public static readonly GameAttributeI Buff_Icon_Count27 = new(794, "Buff_Icon_Count27", max: 16777215, bitCount: 24);
        public static readonly GameAttributeI Buff_Icon_Count28 = new(795, "Buff_Icon_Count28", max: 16777215, bitCount: 24);
        public static readonly GameAttributeI Buff_Icon_Count29 = new(796, "Buff_Icon_Count29", max: 16777215, bitCount: 24);
        public static readonly GameAttributeI Buff_Icon_Count30 = new(797, "Buff_Icon_Count30", max: 16777215, bitCount: 24);
        public static readonly GameAttributeI Buff_Icon_Count31 = new(798, "Buff_Icon_Count31", max: 16777215, bitCount: 24);
        public static readonly GameAttributeB Observer = new(799, "Observer");
        public static readonly GameAttributeB Resurrect_As_Observer = new(800, "Resurrect_As_Observer");
        public static readonly GameAttributeI Combo_Level = new(801, "Combo_Level", max: 3, bitCount: 2);
        public static readonly GameAttributeF Combo_Time_Last_Move = new(802, "Combo_Time_Last_Move");
        public static readonly GameAttributeB Burrowed = new(803, "Burrowed");
        public static readonly GameAttributeF Death_Replacement_Effect_Group_SNO = new(804, "Death_Replacement_Effect_Group_SNO", defaultValue: -1);
        public static readonly GameAttributeI Checkpoint_Resurrection_Allowed_Game_Time = new(805, "Checkpoint_Resurrection_Allowed_Game_Time");
        public static readonly GameAttributeI Checkpoint_Resurrection_Forced_Game_Time = new(806, "Checkpoint_Resurrection_Forced_Game_Time");
        public static readonly GameAttributeI Corpse_Resurrection_Allowed_Game_Time = new(807, "Corpse_Resurrection_Allowed_Game_Time");
        public static readonly GameAttributeI Corpse_Resurrection_Charges = new(808, "Corpse_Resurrection_Charges", max: 15, bitCount: 4);
        public static readonly GameAttributeB Corpse_Resurrection_Disabled = new(809, "Corpse_Resurrection_Disabled");
        public static readonly GameAttributeF Controlling_TimedEvent_SNO = new(810, "Controlling_TimedEvent_SNO", defaultValue: -1);
        public static readonly GameAttributeF Casting_Speed_Percent = new(811, "Casting_Speed_Percent", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeB using_Bossbar = new(812, "using_Bossbar");
        public static readonly GameAttributeB Power_Buff_0_Visual_Effect = new(813, "Power_Buff_0_Visual_Effect");
        public static readonly GameAttributeB Power_Buff_1_Visual_Effect = new(814, "Power_Buff_1_Visual_Effect");
        public static readonly GameAttributeB Power_Buff_2_Visual_Effect = new(815, "Power_Buff_2_Visual_Effect");
        public static readonly GameAttributeB Power_Buff_3_Visual_Effect = new(816, "Power_Buff_3_Visual_Effect");
        public static readonly GameAttributeB Power_Buff_4_Visual_Effect = new(817, "Power_Buff_4_Visual_Effect");
        public static readonly GameAttributeB Power_Buff_5_Visual_Effect = new(818, "Power_Buff_5_Visual_Effect");
        public static readonly GameAttributeB Power_Buff_6_Visual_Effect = new(819, "Power_Buff_6_Visual_Effect");
        public static readonly GameAttributeB Power_Buff_7_Visual_Effect = new(820, "Power_Buff_7_Visual_Effect");
        public static readonly GameAttributeB Power_Buff_8_Visual_Effect = new(821, "Power_Buff_8_Visual_Effect");
        public static readonly GameAttributeB Power_Buff_9_Visual_Effect = new(822, "Power_Buff_9_Visual_Effect");
        public static readonly GameAttributeB Power_Buff_10_Visual_Effect = new(823, "Power_Buff_10_Visual_Effect");
        public static readonly GameAttributeB Power_Buff_11_Visual_Effect = new(824, "Power_Buff_11_Visual_Effect");
        public static readonly GameAttributeB Power_Buff_12_Visual_Effect = new(825, "Power_Buff_12_Visual_Effect");
        public static readonly GameAttributeB Power_Buff_13_Visual_Effect = new(826, "Power_Buff_13_Visual_Effect");
        public static readonly GameAttributeB Power_Buff_14_Visual_Effect = new(827, "Power_Buff_14_Visual_Effect");
        public static readonly GameAttributeB Power_Buff_15_Visual_Effect = new(828, "Power_Buff_15_Visual_Effect");
        public static readonly GameAttributeB Power_Buff_16_Visual_Effect = new(829, "Power_Buff_16_Visual_Effect");
        public static readonly GameAttributeB Power_Buff_17_Visual_Effect = new(830, "Power_Buff_17_Visual_Effect");
        public static readonly GameAttributeB Power_Buff_18_Visual_Effect = new(831, "Power_Buff_18_Visual_Effect");
        public static readonly GameAttributeB Power_Buff_19_Visual_Effect = new(832, "Power_Buff_19_Visual_Effect");
        public static readonly GameAttributeB Power_Buff_20_Visual_Effect = new(833, "Power_Buff_20_Visual_Effect");
        public static readonly GameAttributeB Power_Buff_21_Visual_Effect = new(834, "Power_Buff_21_Visual_Effect");
        public static readonly GameAttributeB Power_Buff_22_Visual_Effect = new(835, "Power_Buff_22_Visual_Effect");
        public static readonly GameAttributeB Power_Buff_23_Visual_Effect = new(836, "Power_Buff_23_Visual_Effect");
        public static readonly GameAttributeB Power_Buff_24_Visual_Effect = new(837, "Power_Buff_24_Visual_Effect");
        public static readonly GameAttributeB Power_Buff_25_Visual_Effect = new(838, "Power_Buff_25_Visual_Effect");
        public static readonly GameAttributeB Power_Buff_26_Visual_Effect = new(839, "Power_Buff_26_Visual_Effect");
        public static readonly GameAttributeB Power_Buff_27_Visual_Effect = new(840, "Power_Buff_27_Visual_Effect");
        public static readonly GameAttributeB Power_Buff_28_Visual_Effect = new(841, "Power_Buff_28_Visual_Effect");
        public static readonly GameAttributeB Power_Buff_29_Visual_Effect = new(842, "Power_Buff_29_Visual_Effect");
        public static readonly GameAttributeB Power_Buff_30_Visual_Effect = new(843, "Power_Buff_30_Visual_Effect");
        public static readonly GameAttributeB Power_Buff_31_Visual_Effect = new(844, "Power_Buff_31_Visual_Effect");
        public static readonly GameAttributeF StoreSNO = new(845, "StoreSNO");
        public static readonly GameAttributeB Busy = new(846, "Busy");
        public static readonly GameAttributeB Afk = new(847, "Afk");
        public static readonly GameAttributeB LorePlaying = new(848, "LorePlaying");
        public static readonly GameAttributeF LastActionTimestamp = new(849, "LastActionTimestamp");
        public static readonly GameAttributeF PortalNextTime = new(850, "PortalNextTime");
        public static readonly GameAttributeF Repair_Discount_Percent = new(851, "Repair_Discount_Percent", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeB Resource_Degeneration_Prevented = new(852, "Resource_Degeneration_Prevented");
        public static readonly GameAttributeB Operatable = new(853, "Operatable");
        public static readonly GameAttributeB Has_Look_Override = new(854, "Has_Look_Override");
        public static readonly GameAttributeF Spawner_Concurrent_Count_ID = new(855, "Spawner_Concurrent_Count_ID", defaultValue: -1);
        public static readonly GameAttributeB Disabled = new(856, "Disabled");
        public static readonly GameAttributeI Skill_Override = new(857, "Skill_Override", defaultValue: -1, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeB Skill_Override_Active = new(858, "Skill_Override_Active");
        public static readonly GameAttributeB Skill_Override_Ended = new(859, "Skill_Override_Ended");
        public static readonly GameAttributeB Skill_Override_Ended_Active = new(860, "Skill_Override_Ended_Active");
        public static readonly GameAttributeB Is_Power_Proxy = new(861, "Is_Power_Proxy");
        public static readonly GameAttributeB Force_No_Death_Animation = new(862, "Force_No_Death_Animation");
        public static readonly GameAttributeI Player_WeaponClass_Anim_Override = new(863, "Player_WeaponClass_Anim_Override", defaultValue: -1, min: -1, max: 28, bitCount: 5);
        public static readonly GameAttributeB Operatable_Story_Gizmo = new(864, "Operatable_Story_Gizmo");
        public static readonly GameAttributeB Power_Buff_0_Visual_Effect_None = new(865, "Power_Buff_0_Visual_Effect_None");
        public static readonly GameAttributeB Power_Buff_0_Visual_Effect_A = new(866, "Power_Buff_0_Visual_Effect_A");
        public static readonly GameAttributeB Power_Buff_0_Visual_Effect_B = new(867, "Power_Buff_0_Visual_Effect_B");
        public static readonly GameAttributeB Power_Buff_0_Visual_Effect_C = new(868, "Power_Buff_0_Visual_Effect_C");
        public static readonly GameAttributeB Power_Buff_0_Visual_Effect_D = new(869, "Power_Buff_0_Visual_Effect_D");
        public static readonly GameAttributeB Power_Buff_0_Visual_Effect_E = new(870, "Power_Buff_0_Visual_Effect_E");
        public static readonly GameAttributeB Power_Buff_1_Visual_Effect_None = new(871, "Power_Buff_1_Visual_Effect_None");
        public static readonly GameAttributeB Power_Buff_1_Visual_Effect_A = new(872, "Power_Buff_1_Visual_Effect_A");
        public static readonly GameAttributeB Power_Buff_1_Visual_Effect_B = new(873, "Power_Buff_1_Visual_Effect_B");
        public static readonly GameAttributeB Power_Buff_1_Visual_Effect_C = new(874, "Power_Buff_1_Visual_Effect_C");
        public static readonly GameAttributeB Power_Buff_1_Visual_Effect_D = new(875, "Power_Buff_1_Visual_Effect_D");
        public static readonly GameAttributeB Power_Buff_1_Visual_Effect_E = new(876, "Power_Buff_1_Visual_Effect_E");
        public static readonly GameAttributeB Power_Buff_2_Visual_Effect_None = new(877, "Power_Buff_2_Visual_Effect_None");
        public static readonly GameAttributeB Power_Buff_2_Visual_Effect_A = new(878, "Power_Buff_2_Visual_Effect_A");
        public static readonly GameAttributeB Power_Buff_2_Visual_Effect_B = new(879, "Power_Buff_2_Visual_Effect_B");
        public static readonly GameAttributeB Power_Buff_2_Visual_Effect_C = new(880, "Power_Buff_2_Visual_Effect_C");
        public static readonly GameAttributeB Power_Buff_2_Visual_Effect_D = new(881, "Power_Buff_2_Visual_Effect_D");
        public static readonly GameAttributeB Power_Buff_2_Visual_Effect_E = new(882, "Power_Buff_2_Visual_Effect_E");
        public static readonly GameAttributeB Power_Buff_3_Visual_Effect_None = new(883, "Power_Buff_3_Visual_Effect_None");
        public static readonly GameAttributeB Power_Buff_3_Visual_Effect_A = new(884, "Power_Buff_3_Visual_Effect_A");
        public static readonly GameAttributeB Power_Buff_3_Visual_Effect_B = new(885, "Power_Buff_3_Visual_Effect_B");
        public static readonly GameAttributeB Power_Buff_3_Visual_Effect_C = new(886, "Power_Buff_3_Visual_Effect_C");
        public static readonly GameAttributeB Power_Buff_3_Visual_Effect_D = new(887, "Power_Buff_3_Visual_Effect_D");
        public static readonly GameAttributeB Power_Buff_3_Visual_Effect_E = new(888, "Power_Buff_3_Visual_Effect_E");
        public static readonly GameAttributeB Power_Buff_4_Visual_Effect_None = new(889, "Power_Buff_4_Visual_Effect_None");
        public static readonly GameAttributeB Power_Buff_4_Visual_Effect_A = new(890, "Power_Buff_4_Visual_Effect_A");
        public static readonly GameAttributeB Power_Buff_4_Visual_Effect_B = new(891, "Power_Buff_4_Visual_Effect_B");
        public static readonly GameAttributeB Power_Buff_4_Visual_Effect_C = new(892, "Power_Buff_4_Visual_Effect_C");
        public static readonly GameAttributeB Power_Buff_4_Visual_Effect_D = new(893, "Power_Buff_4_Visual_Effect_D");
        public static readonly GameAttributeB Power_Buff_4_Visual_Effect_E = new(894, "Power_Buff_4_Visual_Effect_E");
        public static readonly GameAttributeB Power_Buff_5_Visual_Effect_None = new(895, "Power_Buff_5_Visual_Effect_None");
        public static readonly GameAttributeB Power_Buff_5_Visual_Effect_A = new(896, "Power_Buff_5_Visual_Effect_A");
        public static readonly GameAttributeB Power_Buff_5_Visual_Effect_B = new(897, "Power_Buff_5_Visual_Effect_B");
        public static readonly GameAttributeB Power_Buff_5_Visual_Effect_C = new(898, "Power_Buff_5_Visual_Effect_C");
        public static readonly GameAttributeB Power_Buff_5_Visual_Effect_D = new(899, "Power_Buff_5_Visual_Effect_D");
        public static readonly GameAttributeB Power_Buff_5_Visual_Effect_E = new(900, "Power_Buff_5_Visual_Effect_E");
        public static readonly GameAttributeB Power_Buff_6_Visual_Effect_None = new(901, "Power_Buff_6_Visual_Effect_None");
        public static readonly GameAttributeB Power_Buff_6_Visual_Effect_A = new(902, "Power_Buff_6_Visual_Effect_A");
        public static readonly GameAttributeB Power_Buff_6_Visual_Effect_B = new(903, "Power_Buff_6_Visual_Effect_B");
        public static readonly GameAttributeB Power_Buff_6_Visual_Effect_C = new(904, "Power_Buff_6_Visual_Effect_C");
        public static readonly GameAttributeB Power_Buff_6_Visual_Effect_D = new(905, "Power_Buff_6_Visual_Effect_D");
        public static readonly GameAttributeB Power_Buff_6_Visual_Effect_E = new(906, "Power_Buff_6_Visual_Effect_E");
        public static readonly GameAttributeB Power_Buff_7_Visual_Effect_None = new(907, "Power_Buff_7_Visual_Effect_None");
        public static readonly GameAttributeB Power_Buff_7_Visual_Effect_A = new(908, "Power_Buff_7_Visual_Effect_A");
        public static readonly GameAttributeB Power_Buff_7_Visual_Effect_B = new(909, "Power_Buff_7_Visual_Effect_B");
        public static readonly GameAttributeB Power_Buff_7_Visual_Effect_C = new(910, "Power_Buff_7_Visual_Effect_C");
        public static readonly GameAttributeB Power_Buff_7_Visual_Effect_D = new(911, "Power_Buff_7_Visual_Effect_D");
        public static readonly GameAttributeB Power_Buff_7_Visual_Effect_E = new(912, "Power_Buff_7_Visual_Effect_E");
        public static readonly GameAttributeB Power_Buff_8_Visual_Effect_None = new(913, "Power_Buff_8_Visual_Effect_None");
        public static readonly GameAttributeB Power_Buff_8_Visual_Effect_A = new(914, "Power_Buff_8_Visual_Effect_A");
        public static readonly GameAttributeB Power_Buff_8_Visual_Effect_B = new(915, "Power_Buff_8_Visual_Effect_B");
        public static readonly GameAttributeB Power_Buff_8_Visual_Effect_C = new(916, "Power_Buff_8_Visual_Effect_C");
        public static readonly GameAttributeB Power_Buff_8_Visual_Effect_D = new(917, "Power_Buff_8_Visual_Effect_D");
        public static readonly GameAttributeB Power_Buff_8_Visual_Effect_E = new(918, "Power_Buff_8_Visual_Effect_E");
        public static readonly GameAttributeB Power_Buff_9_Visual_Effect_None = new(919, "Power_Buff_9_Visual_Effect_None");
        public static readonly GameAttributeB Power_Buff_9_Visual_Effect_A = new(920, "Power_Buff_9_Visual_Effect_A");
        public static readonly GameAttributeB Power_Buff_9_Visual_Effect_B = new(921, "Power_Buff_9_Visual_Effect_B");
        public static readonly GameAttributeB Power_Buff_9_Visual_Effect_C = new(922, "Power_Buff_9_Visual_Effect_C");
        public static readonly GameAttributeB Power_Buff_9_Visual_Effect_D = new(923, "Power_Buff_9_Visual_Effect_D");
        public static readonly GameAttributeB Power_Buff_9_Visual_Effect_E = new(924, "Power_Buff_9_Visual_Effect_E");
        public static readonly GameAttributeB Power_Buff_10_Visual_Effect_None = new(925, "Power_Buff_10_Visual_Effect_None");
        public static readonly GameAttributeB Power_Buff_10_Visual_Effect_A = new(926, "Power_Buff_10_Visual_Effect_A");
        public static readonly GameAttributeB Power_Buff_10_Visual_Effect_B = new(927, "Power_Buff_10_Visual_Effect_B");
        public static readonly GameAttributeB Power_Buff_10_Visual_Effect_C = new(928, "Power_Buff_10_Visual_Effect_C");
        public static readonly GameAttributeB Power_Buff_10_Visual_Effect_D = new(929, "Power_Buff_10_Visual_Effect_D");
        public static readonly GameAttributeB Power_Buff_10_Visual_Effect_E = new(930, "Power_Buff_10_Visual_Effect_E");
        public static readonly GameAttributeB Power_Buff_11_Visual_Effect_None = new(931, "Power_Buff_11_Visual_Effect_None");
        public static readonly GameAttributeB Power_Buff_11_Visual_Effect_A = new(932, "Power_Buff_11_Visual_Effect_A");
        public static readonly GameAttributeB Power_Buff_11_Visual_Effect_B = new(933, "Power_Buff_11_Visual_Effect_B");
        public static readonly GameAttributeB Power_Buff_11_Visual_Effect_C = new(934, "Power_Buff_11_Visual_Effect_C");
        public static readonly GameAttributeB Power_Buff_11_Visual_Effect_D = new(935, "Power_Buff_11_Visual_Effect_D");
        public static readonly GameAttributeB Power_Buff_11_Visual_Effect_E = new(936, "Power_Buff_11_Visual_Effect_E");
        public static readonly GameAttributeB Power_Buff_12_Visual_Effect_None = new(937, "Power_Buff_12_Visual_Effect_None");
        public static readonly GameAttributeB Power_Buff_12_Visual_Effect_A = new(938, "Power_Buff_12_Visual_Effect_A");
        public static readonly GameAttributeB Power_Buff_12_Visual_Effect_B = new(939, "Power_Buff_12_Visual_Effect_B");
        public static readonly GameAttributeB Power_Buff_12_Visual_Effect_C = new(940, "Power_Buff_12_Visual_Effect_C");
        public static readonly GameAttributeB Power_Buff_12_Visual_Effect_D = new(941, "Power_Buff_12_Visual_Effect_D");
        public static readonly GameAttributeB Power_Buff_12_Visual_Effect_E = new(942, "Power_Buff_12_Visual_Effect_E");
        public static readonly GameAttributeB Power_Buff_13_Visual_Effect_None = new(943, "Power_Buff_13_Visual_Effect_None");
        public static readonly GameAttributeB Power_Buff_13_Visual_Effect_A = new(944, "Power_Buff_13_Visual_Effect_A");
        public static readonly GameAttributeB Power_Buff_13_Visual_Effect_B = new(945, "Power_Buff_13_Visual_Effect_B");
        public static readonly GameAttributeB Power_Buff_13_Visual_Effect_C = new(946, "Power_Buff_13_Visual_Effect_C");
        public static readonly GameAttributeB Power_Buff_13_Visual_Effect_D = new(947, "Power_Buff_13_Visual_Effect_D");
        public static readonly GameAttributeB Power_Buff_13_Visual_Effect_E = new(948, "Power_Buff_13_Visual_Effect_E");
        public static readonly GameAttributeB Power_Buff_14_Visual_Effect_None = new(949, "Power_Buff_14_Visual_Effect_None");
        public static readonly GameAttributeB Power_Buff_14_Visual_Effect_A = new(950, "Power_Buff_14_Visual_Effect_A");
        public static readonly GameAttributeB Power_Buff_14_Visual_Effect_B = new(951, "Power_Buff_14_Visual_Effect_B");
        public static readonly GameAttributeB Power_Buff_14_Visual_Effect_C = new(952, "Power_Buff_14_Visual_Effect_C");
        public static readonly GameAttributeB Power_Buff_14_Visual_Effect_D = new(953, "Power_Buff_14_Visual_Effect_D");
        public static readonly GameAttributeB Power_Buff_14_Visual_Effect_E = new(954, "Power_Buff_14_Visual_Effect_E");
        public static readonly GameAttributeB Power_Buff_15_Visual_Effect_None = new(955, "Power_Buff_15_Visual_Effect_None");
        public static readonly GameAttributeB Power_Buff_15_Visual_Effect_A = new(956, "Power_Buff_15_Visual_Effect_A");
        public static readonly GameAttributeB Power_Buff_15_Visual_Effect_B = new(957, "Power_Buff_15_Visual_Effect_B");
        public static readonly GameAttributeB Power_Buff_15_Visual_Effect_C = new(958, "Power_Buff_15_Visual_Effect_C");
        public static readonly GameAttributeB Power_Buff_15_Visual_Effect_D = new(959, "Power_Buff_15_Visual_Effect_D");
        public static readonly GameAttributeB Power_Buff_15_Visual_Effect_E = new(960, "Power_Buff_15_Visual_Effect_E");
        public static readonly GameAttributeB Power_Buff_16_Visual_Effect_None = new(961, "Power_Buff_16_Visual_Effect_None");
        public static readonly GameAttributeB Power_Buff_16_Visual_Effect_A = new(962, "Power_Buff_16_Visual_Effect_A");
        public static readonly GameAttributeB Power_Buff_16_Visual_Effect_B = new(963, "Power_Buff_16_Visual_Effect_B");
        public static readonly GameAttributeB Power_Buff_16_Visual_Effect_C = new(964, "Power_Buff_16_Visual_Effect_C");
        public static readonly GameAttributeB Power_Buff_16_Visual_Effect_D = new(965, "Power_Buff_16_Visual_Effect_D");
        public static readonly GameAttributeB Power_Buff_16_Visual_Effect_E = new(966, "Power_Buff_16_Visual_Effect_E");
        public static readonly GameAttributeB Power_Buff_17_Visual_Effect_None = new(967, "Power_Buff_17_Visual_Effect_None");
        public static readonly GameAttributeB Power_Buff_17_Visual_Effect_A = new(968, "Power_Buff_17_Visual_Effect_A");
        public static readonly GameAttributeB Power_Buff_17_Visual_Effect_B = new(969, "Power_Buff_17_Visual_Effect_B");
        public static readonly GameAttributeB Power_Buff_17_Visual_Effect_C = new(970, "Power_Buff_17_Visual_Effect_C");
        public static readonly GameAttributeB Power_Buff_17_Visual_Effect_D = new(971, "Power_Buff_17_Visual_Effect_D");
        public static readonly GameAttributeB Power_Buff_17_Visual_Effect_E = new(972, "Power_Buff_17_Visual_Effect_E");
        public static readonly GameAttributeB Power_Buff_18_Visual_Effect_None = new(973, "Power_Buff_18_Visual_Effect_None");
        public static readonly GameAttributeB Power_Buff_18_Visual_Effect_A = new(974, "Power_Buff_18_Visual_Effect_A");
        public static readonly GameAttributeB Power_Buff_18_Visual_Effect_B = new(975, "Power_Buff_18_Visual_Effect_B");
        public static readonly GameAttributeB Power_Buff_18_Visual_Effect_C = new(976, "Power_Buff_18_Visual_Effect_C");
        public static readonly GameAttributeB Power_Buff_18_Visual_Effect_D = new(977, "Power_Buff_18_Visual_Effect_D");
        public static readonly GameAttributeB Power_Buff_18_Visual_Effect_E = new(978, "Power_Buff_18_Visual_Effect_E");
        public static readonly GameAttributeB Power_Buff_19_Visual_Effect_None = new(979, "Power_Buff_19_Visual_Effect_None");
        public static readonly GameAttributeB Power_Buff_19_Visual_Effect_A = new(980, "Power_Buff_19_Visual_Effect_A");
        public static readonly GameAttributeB Power_Buff_19_Visual_Effect_B = new(981, "Power_Buff_19_Visual_Effect_B");
        public static readonly GameAttributeB Power_Buff_19_Visual_Effect_C = new(982, "Power_Buff_19_Visual_Effect_C");
        public static readonly GameAttributeB Power_Buff_19_Visual_Effect_D = new(983, "Power_Buff_19_Visual_Effect_D");
        public static readonly GameAttributeB Power_Buff_19_Visual_Effect_E = new(984, "Power_Buff_19_Visual_Effect_E");
        public static readonly GameAttributeB Power_Buff_20_Visual_Effect_None = new(985, "Power_Buff_20_Visual_Effect_None");
        public static readonly GameAttributeB Power_Buff_20_Visual_Effect_A = new(986, "Power_Buff_20_Visual_Effect_A");
        public static readonly GameAttributeB Power_Buff_20_Visual_Effect_B = new(987, "Power_Buff_20_Visual_Effect_B");
        public static readonly GameAttributeB Power_Buff_20_Visual_Effect_C = new(988, "Power_Buff_20_Visual_Effect_C");
        public static readonly GameAttributeB Power_Buff_20_Visual_Effect_D = new(989, "Power_Buff_20_Visual_Effect_D");
        public static readonly GameAttributeB Power_Buff_20_Visual_Effect_E = new(990, "Power_Buff_20_Visual_Effect_E");
        public static readonly GameAttributeB Power_Buff_21_Visual_Effect_None = new(991, "Power_Buff_21_Visual_Effect_None");
        public static readonly GameAttributeB Power_Buff_21_Visual_Effect_A = new(992, "Power_Buff_21_Visual_Effect_A");
        public static readonly GameAttributeB Power_Buff_21_Visual_Effect_B = new(993, "Power_Buff_21_Visual_Effect_B");
        public static readonly GameAttributeB Power_Buff_21_Visual_Effect_C = new(994, "Power_Buff_21_Visual_Effect_C");
        public static readonly GameAttributeB Power_Buff_21_Visual_Effect_D = new(995, "Power_Buff_21_Visual_Effect_D");
        public static readonly GameAttributeB Power_Buff_21_Visual_Effect_E = new(996, "Power_Buff_21_Visual_Effect_E");
        public static readonly GameAttributeB Power_Buff_22_Visual_Effect_None = new(997, "Power_Buff_22_Visual_Effect_None");
        public static readonly GameAttributeB Power_Buff_22_Visual_Effect_A = new(998, "Power_Buff_22_Visual_Effect_A");
        public static readonly GameAttributeB Power_Buff_22_Visual_Effect_B = new(999, "Power_Buff_22_Visual_Effect_B");
        public static readonly GameAttributeB Power_Buff_22_Visual_Effect_C = new(1000, "Power_Buff_22_Visual_Effect_C");
        public static readonly GameAttributeB Power_Buff_22_Visual_Effect_D = new(1001, "Power_Buff_22_Visual_Effect_D");
        public static readonly GameAttributeB Power_Buff_22_Visual_Effect_E = new(1002, "Power_Buff_22_Visual_Effect_E");
        public static readonly GameAttributeB Power_Buff_23_Visual_Effect_None = new(1003, "Power_Buff_23_Visual_Effect_None");
        public static readonly GameAttributeB Power_Buff_23_Visual_Effect_A = new(1004, "Power_Buff_23_Visual_Effect_A");
        public static readonly GameAttributeB Power_Buff_23_Visual_Effect_B = new(1005, "Power_Buff_23_Visual_Effect_B");
        public static readonly GameAttributeB Power_Buff_23_Visual_Effect_C = new(1006, "Power_Buff_23_Visual_Effect_C");
        public static readonly GameAttributeB Power_Buff_23_Visual_Effect_D = new(1007, "Power_Buff_23_Visual_Effect_D");
        public static readonly GameAttributeB Power_Buff_23_Visual_Effect_E = new(1008, "Power_Buff_23_Visual_Effect_E");
        public static readonly GameAttributeB Power_Buff_24_Visual_Effect_None = new(1009, "Power_Buff_24_Visual_Effect_None");
        public static readonly GameAttributeB Power_Buff_24_Visual_Effect_A = new(1010, "Power_Buff_24_Visual_Effect_A");
        public static readonly GameAttributeB Power_Buff_24_Visual_Effect_B = new(1011, "Power_Buff_24_Visual_Effect_B");
        public static readonly GameAttributeB Power_Buff_24_Visual_Effect_C = new(1012, "Power_Buff_24_Visual_Effect_C");
        public static readonly GameAttributeB Power_Buff_24_Visual_Effect_D = new(1013, "Power_Buff_24_Visual_Effect_D");
        public static readonly GameAttributeB Power_Buff_24_Visual_Effect_E = new(1014, "Power_Buff_24_Visual_Effect_E");
        public static readonly GameAttributeB Power_Buff_25_Visual_Effect_None = new(1015, "Power_Buff_25_Visual_Effect_None");
        public static readonly GameAttributeB Power_Buff_25_Visual_Effect_A = new(1016, "Power_Buff_25_Visual_Effect_A");
        public static readonly GameAttributeB Power_Buff_25_Visual_Effect_B = new(1017, "Power_Buff_25_Visual_Effect_B");
        public static readonly GameAttributeB Power_Buff_25_Visual_Effect_C = new(1018, "Power_Buff_25_Visual_Effect_C");
        public static readonly GameAttributeB Power_Buff_25_Visual_Effect_D = new(1019, "Power_Buff_25_Visual_Effect_D");
        public static readonly GameAttributeB Power_Buff_25_Visual_Effect_E = new(1020, "Power_Buff_25_Visual_Effect_E");
        public static readonly GameAttributeB Power_Buff_26_Visual_Effect_None = new(1021, "Power_Buff_26_Visual_Effect_None");
        public static readonly GameAttributeB Power_Buff_26_Visual_Effect_A = new(1022, "Power_Buff_26_Visual_Effect_A");
        public static readonly GameAttributeB Power_Buff_26_Visual_Effect_B = new(1023, "Power_Buff_26_Visual_Effect_B");
        public static readonly GameAttributeB Power_Buff_26_Visual_Effect_C = new(1024, "Power_Buff_26_Visual_Effect_C");
        public static readonly GameAttributeB Power_Buff_26_Visual_Effect_D = new(1025, "Power_Buff_26_Visual_Effect_D");
        public static readonly GameAttributeB Power_Buff_26_Visual_Effect_E = new(1026, "Power_Buff_26_Visual_Effect_E");
        public static readonly GameAttributeB Power_Buff_27_Visual_Effect_None = new(1027, "Power_Buff_27_Visual_Effect_None");
        public static readonly GameAttributeB Power_Buff_27_Visual_Effect_A = new(1028, "Power_Buff_27_Visual_Effect_A");
        public static readonly GameAttributeB Power_Buff_27_Visual_Effect_B = new(1029, "Power_Buff_27_Visual_Effect_B");
        public static readonly GameAttributeB Power_Buff_27_Visual_Effect_C = new(1030, "Power_Buff_27_Visual_Effect_C");
        public static readonly GameAttributeB Power_Buff_27_Visual_Effect_D = new(1031, "Power_Buff_27_Visual_Effect_D");
        public static readonly GameAttributeB Power_Buff_27_Visual_Effect_E = new(1032, "Power_Buff_27_Visual_Effect_E");
        public static readonly GameAttributeB Power_Buff_28_Visual_Effect_None = new(1033, "Power_Buff_28_Visual_Effect_None");
        public static readonly GameAttributeB Power_Buff_28_Visual_Effect_A = new(1034, "Power_Buff_28_Visual_Effect_A");
        public static readonly GameAttributeB Power_Buff_28_Visual_Effect_B = new(1035, "Power_Buff_28_Visual_Effect_B");
        public static readonly GameAttributeB Power_Buff_28_Visual_Effect_C = new(1036, "Power_Buff_28_Visual_Effect_C");
        public static readonly GameAttributeB Power_Buff_28_Visual_Effect_D = new(1037, "Power_Buff_28_Visual_Effect_D");
        public static readonly GameAttributeB Power_Buff_28_Visual_Effect_E = new(1038, "Power_Buff_28_Visual_Effect_E");
        public static readonly GameAttributeB Power_Buff_29_Visual_Effect_None = new(1039, "Power_Buff_29_Visual_Effect_None");
        public static readonly GameAttributeB Power_Buff_29_Visual_Effect_A = new(1040, "Power_Buff_29_Visual_Effect_A");
        public static readonly GameAttributeB Power_Buff_29_Visual_Effect_B = new(1041, "Power_Buff_29_Visual_Effect_B");
        public static readonly GameAttributeB Power_Buff_29_Visual_Effect_C = new(1042, "Power_Buff_29_Visual_Effect_C");
        public static readonly GameAttributeB Power_Buff_29_Visual_Effect_D = new(1043, "Power_Buff_29_Visual_Effect_D");
        public static readonly GameAttributeB Power_Buff_29_Visual_Effect_E = new(1044, "Power_Buff_29_Visual_Effect_E");
        public static readonly GameAttributeB Power_Buff_30_Visual_Effect_None = new(1045, "Power_Buff_30_Visual_Effect_None");
        public static readonly GameAttributeB Power_Buff_30_Visual_Effect_A = new(1046, "Power_Buff_30_Visual_Effect_A");
        public static readonly GameAttributeB Power_Buff_30_Visual_Effect_B = new(1047, "Power_Buff_30_Visual_Effect_B");
        public static readonly GameAttributeB Power_Buff_30_Visual_Effect_C = new(1048, "Power_Buff_30_Visual_Effect_C");
        public static readonly GameAttributeB Power_Buff_30_Visual_Effect_D = new(1049, "Power_Buff_30_Visual_Effect_D");
        public static readonly GameAttributeB Power_Buff_30_Visual_Effect_E = new(1050, "Power_Buff_30_Visual_Effect_E");
        public static readonly GameAttributeB Power_Buff_31_Visual_Effect_None = new(1051, "Power_Buff_31_Visual_Effect_None");
        public static readonly GameAttributeB Power_Buff_31_Visual_Effect_A = new(1052, "Power_Buff_31_Visual_Effect_A");
        public static readonly GameAttributeB Power_Buff_31_Visual_Effect_B = new(1053, "Power_Buff_31_Visual_Effect_B");
        public static readonly GameAttributeB Power_Buff_31_Visual_Effect_C = new(1054, "Power_Buff_31_Visual_Effect_C");
        public static readonly GameAttributeB Power_Buff_31_Visual_Effect_D = new(1055, "Power_Buff_31_Visual_Effect_D");
        public static readonly GameAttributeB Power_Buff_31_Visual_Effect_E = new(1056, "Power_Buff_31_Visual_Effect_E");
        public static readonly GameAttributeF Walk_Passability_Power_SNO = new(1057, "Walk_Passability_Power_SNO", defaultValue: -1);
        public static readonly GameAttributeF Passability_Power_SNO = new(1058, "Passability_Power_SNO", defaultValue: -1);
        public static readonly GameAttributeF Flippy_ID = new(1059, "Flippy_ID", defaultValue: -1);
        public static readonly GameAttributeI Summoning_Machine_Num_Casters = new(1060, "Summoning_Machine_Num_Casters", max: 255, bitCount: 8);
        public static readonly GameAttributeI Summoning_Machine_Spawn_Count = new(1061, "Summoning_Machine_Spawn_Count", max: 4095, bitCount: 12);
        public static readonly GameAttributeF Summoning_Machine_Next_Spawn_Ticks = new(1062, "Summoning_Machine_Next_Spawn_Ticks");
        public static readonly GameAttributeI Summoning_Machine_Spawn_Team = new(1063, "Summoning_Machine_Spawn_Team", defaultValue: -1, min: -1, max: 23, bitCount: 5);
        public static readonly GameAttributeF Screen_Attack_Radius_Constant = new(1064, "Screen_Attack_Radius_Constant", encodingType: GameAttributeEncoding.Float16, defaultValue: 1114636288, bitCount: 16);
        public static readonly GameAttributeF Damage_Done_Reduction_Percent = new(1065, "Max(Damage_Done_Reduction_Percent,1)", encodingType: GameAttributeEncoding.Float16, bitCount: 16); // FIXME: name looks like recursive script
        public static readonly GameAttributeI Set_Item_Count = new(1066, "Set_Item_Count");
        public static readonly GameAttributeI Set_Bonus_Count = new(1067, "Set_Bonus_Count");
        public static readonly GameAttributeF Spawner_Countdown_Percent = new(1068, "Spawner_Countdown_Percent", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeB Attack_Slow = new(1069, "Attack_Slow");
        public static readonly GameAttributeB Power_Disabled = new(1070, "Power_Disabled");
        public static readonly GameAttributeI Weapon_Effect_Override = new(1071, "Weapon_Effect_Override", max: 14, bitCount: 4);
        public static readonly GameAttributeF Debuff_Duration_Reduction_Percent = new(1072, "Debuff_Duration_Reduction_Percent", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeB Uses_PvP_Power_Tags = new(1073, "Uses_PvP_Power_Tags");
        public static readonly GameAttributeI Trait = new(1074, "Trait", min: -1, max: 30, bitCount: 5);
        public static readonly GameAttributeF Last_ACD_Attacked_By = new(1075, "Last_ACD_Attacked_By", defaultValue: -1);
        public static readonly GameAttributeF Gold_PickUp_Radius = new(1076, "Gold_PickUp_Radius", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF ClientOnlyEffect = new(1077, "ClientOnlyEffect", defaultValue: -1);
        public static readonly GameAttributeB Power_Saved_Attribute = new(1078, "Power_Saved_Attribute");
        public static readonly GameAttributeF Resource_Gain_Bonus_Percent = new(1079, "Resource_Gain_Bonus_Percent", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeI Looping_Animation_Start_Time = new(1080, "Looping_Animation_Start_Time", u4: 1, u5: 1, flags: (ReplicationFlags)222); // FIXME: incorrect flags
        public static readonly GameAttributeI Looping_Animation_End_Time = new(1081, "Looping_Animation_End_Time", u4: 1, u5: 1, flags: (ReplicationFlags)222); // FIXME: incorrect flags
        public static readonly GameAttributeB Looping_Animation_Suppress_Item_Tooltips = new(1082, "Looping_Animation_Suppress_Item_Tooltips");
        public static readonly GameAttributeF Heal_Effect_Last_Played_Tick = new(1083, "Heal_Effect_Last_Played_Tick", defaultValue: -1);
        public static readonly GameAttributeF Resource_Effect_Last_Played_tick = new(1084, "Resource_Effect_Last_Played_tick", defaultValue: -1);
        public static readonly GameAttributeF Thorns_Effect_Last_Played_tick = new(1085, "Thorns_Effect_Last_Played_tick", defaultValue: -1);
        public static readonly GameAttributeF PVP_Kills = new(1086, "PVP_Kills");
        public static readonly GameAttributeF PVP_Deaths = new(1087, "PVP_Deaths");
        public static readonly GameAttributeF PVP_Assists = new(1088, "PVP_Assists");
        public static readonly GameAttributeF PVP_Progression_Points_Gained = new(1089, "PVP_Progression_Points_Gained");
        public static readonly GameAttributeF PVP_Current_Kill_Streak = new(1090, "PVP_Current_Kill_Streak");
        public static readonly GameAttributeF PVP_Current_Death_Streak = new(1091, "PVP_Current_Death_Streak");
        public static readonly GameAttributeF PVP_Longest_Kill_Streak = new(1092, "PVP_Longest_Kill_Streak");
        public static readonly GameAttributeF PVP_Longest_Death_Streak = new(1093, "PVP_Longest_Death_Streak");
        public static readonly GameAttributeF Turn_Rate_Scalar = new(1094, "Turn_Rate_Scalar", encodingType: GameAttributeEncoding.Float16, defaultValue: 1065353216, bitCount: 16);
        public static readonly GameAttributeF Turn_Accel_Scalar = new(1095, "Turn_Accel_Scalar", encodingType: GameAttributeEncoding.Float16, defaultValue: 1065353216, bitCount: 16);
        public static readonly GameAttributeF Turn_Deccel_Scalar = new(1096, "Turn_Deccel_Scalar", encodingType: GameAttributeEncoding.Float16, defaultValue: 1065353216, bitCount: 16);
        public static readonly GameAttributeB No_Health_Drop = new(1097, "No_Health_Drop");
        public static readonly GameAttributeB Leader = new(1098, "Leader");
        public static readonly GameAttributeB IsContentRestrictedActor = new(1099, "IsContentRestrictedActor");
        public static readonly GameAttributeB InBossEncounter = new(1100, "InBossEncounter");
        public static readonly GameAttributeB God = new(1101, "God");
        public static readonly GameAttributeB AllowSkillChanges = new(1102, "AllowSkillChanges");
        public static readonly GameAttributeB MinimapActive = new(1103, "MinimapActive", u4: 1, u5: 1, flags: (ReplicationFlags)31); // FIXME: incorrect flags
        public static readonly GameAttributeF MinimapIconOverride = new(1104, "MinimapIconOverride", defaultValue: -1);
        public static readonly GameAttributeB MinimapDisableArrow = new(1105, "MinimapDisableArrow");
        public static readonly GameAttributeF Last_Blocked_ACD = new(1106, "Last_Blocked_ACD", defaultValue: -1);
        public static readonly GameAttributeF Last_Blocked_Time = new(1107, "Last_Blocked_Time");
        public static readonly GameAttributeB Deactivate_Lure = new(1108, "DeactivateLure");
        public static readonly GameAttributeB Weapons_Hidden = new(1109, "Weapons_Hidden");
        public static readonly GameAttributeB Main_Hand_Weapon_Hidden = new(1110, "Main_Hand_Weapon_Hidden");
        public static readonly GameAttributeB Off_Hand_Weapon_Hidden = new(1111, "Off_Hand_Weapon_Hidden");
        public static readonly GameAttributeB Actor_Updates_Attributes_From_Owner = new(1112, "Actor_Updates_Attributes_From_Owner");
        public static readonly GameAttributeF Taunt_Target_ACD = new(1113, "Taunt_Target_ACD", defaultValue: -1);
        public static readonly GameAttributeF Charm_Source_ACD = new(1114, "Charm_Source_ACD", defaultValue: -1);
        public static readonly GameAttributeF UI_Only_Percent_Damage_Increase = new(1115, "UI_Only_Percent_Damage_Increase", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Projectile_Effect_SNO = new(1116, "Projectile_Effect_SNO", defaultValue: -1);
        public static readonly GameAttributeF On_Hit_Fear_Proc_Chance = new(1117, "On_Hit_Fear_Proc_Chance", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF On_Hit_Stun_Proc_Chance = new(1118, "On_Hit_Stun_Proc_Chance", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF On_Hit_Blind_Proc_Chance = new(1119, "On_Hit_Blind_Proc_Chance", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF On_Hit_Freeze_Proc_Chance = new(1120, "On_Hit_Freeze_Proc_Chance", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF On_Hit_Chill_Proc_Chance = new(1121, "On_Hit_Chill_Proc_Chance", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF On_Hit_Slow_Proc_Chance = new(1122, "On_Hit_Slow_Proc_Chance", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF On_Hit_Immobilize_Proc_Chance = new(1123, "On_Hit_Immobilize_Proc_Chance", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF On_Hit_Knockback_Proc_Chance = new(1124, "On_Hit_Knockback_Proc_Chance", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF On_Hit_Bleed_Proc_Chance = new(1125, "On_Hit_Bleed_Proc_Chance", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF On_Hit_Bleed_Proc_Damage_Base = new(1126, "On_Hit_Bleed_Proc_Damage_Base", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF On_Hit_Bleed_Proc_Damage_Delta = new(1127, "On_Hit_Bleed_Proc_Damage_Delta", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Damage_Percent_Reduction_From_Ranged = new(1128, "Damage_Percent_Reduction_From_Ranged");
        public static readonly GameAttributeF Damage_Percent_Reduction_From_Melee = new(1129, "Damage_Percent_Reduction_From_Melee");
        public static readonly GameAttributeF Damage_Percent_Reduction_Turns_Into_Heal = new(1130, "Damage_Percent_Reduction_Turns_Into_Heal", encodingType: GameAttributeEncoding.Float16, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 16);
        public static readonly GameAttributeF Damage_Percent_Reduction_From_Elites = new(1131, "Damage_Percent_Reduction_From_Elites");
        public static readonly GameAttributeF Damage_Percent_Reduction_From_Type = new(1132, "Damage_Percent_Reduction_From_Type", encodingType: GameAttributeEncoding.Float16, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 16);
        public static readonly GameAttributeF Damage_Percent_Bonus_Vs_Monster_Type = new(1133, "Damage_Percent_Bonus_Vs_Monster_Type", encodingType: GameAttributeEncoding.Float16, flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated, bitCount: 16);
        public static readonly GameAttributeF Damage_Percent_Bonus_Vs_Elites = new(1134, "Damage_Percent_Bonus_Vs_Elites");
        public static readonly GameAttributeF Item_Manipulation_Timeout = new(1135, "Item_Manipulation_Timeout");
        public static readonly GameAttributeF Picked_Up_Time = new(1136, "Picked_Up_Time");
        public static readonly GameAttributeF UnequippedTime = new(1137, "UnequippedTime", defaultValue: 1);
        public static readonly GameAttributeF Last_ACD_Killed_Time = new(1138, "Last_ACD_Killed_Time");
        public static readonly GameAttributeB CannotDieDuring = new(1139, "CannotDieDuring");
        public static readonly GameAttributeF Weapon_On_Hit_Fear_Proc_Chance = new(1140, "Weapon_On_Hit_Fear_Proc_Chance", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Weapon_On_Hit_Stun_Proc_Chance = new(1141, "Weapon_On_Hit_Stun_Proc_Chance", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Weapon_On_Hit_Blind_Proc_Chance = new(1142, "Weapon_On_Hit_Blind_Proc_Chance", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Weapon_On_Hit_Freeze_Proc_Chance = new(1143, "Weapon_On_Hit_Freeze_Proc_Chance", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Weapon_On_Hit_Chill_Proc_Chance = new(1144, "Weapon_On_Hit_Chill_Proc_Chance", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Weapon_On_Hit_Slow_Proc_Chance = new(1145, "Weapon_On_Hit_Slow_Proc_Chance", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Weapon_On_Hit_Immobilize_Proc_Chance = new(1146, "Weapon_On_Hit_Immobilize_Proc_Chance", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Weapon_On_Hit_Knockback_Proc_Chance = new(1147, "Weapon_On_Hit_Knockback_Proc_Chance", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Weapon_On_Hit_Bleed_Proc_Chance = new(1148, "Weapon_On_Hit_Bleed_Proc_Chance", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Weapon_On_Hit_Bleed_Proc_Damage_Base = new(1149, "Weapon_On_Hit_Bleed_Proc_Damage_Base", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Weapon_On_Hit_Bleed_Proc_Damage_Delta = new(1150, "Weapon_On_Hit_Bleed_Proc_Damage_Delta", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Weapon_On_Hit_Percent_Bleed_Proc_Chance = new(1151, "Weapon_On_Hit_Percent_Bleed_Proc_Chance", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Weapon_On_Hit_Percent_Bleed_Proc_Damage = new(1152, "Weapon_On_Hit_Percent_Bleed_Proc_Damage", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Weapon_On_Hit_Percent_Bleed_Proc_Duration = new(1153, "Weapon_On_Hit_Percent_Bleed_Proc_Duration", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Weapon_On_Hit_Fear_Proc_Chance_MainHand = new(1154, "Weapon_On_Hit_Fear_Proc_Chance_MainHand", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Weapon_On_Hit_Fear_Proc_Chance_OffHand = new(1155, "Weapon_On_Hit_Fear_Proc_Chance_OffHand", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Weapon_On_Hit_Fear_Proc_Chance_CurrentHand = new(1156, "Weapon_On_Hit_Fear_Proc_Chance_CurrentHand", encodingType: GameAttributeEncoding.Float16, script: "(DualWield_Hand ? Weapon_On_Hit_Fear_Proc_Chance_OffHand : Weapon_On_Hit_Fear_Proc_Chance_MainHand)", bitCount: 16);
        public static readonly GameAttributeF Weapon_On_Hit_Stun_Proc_Chance_MainHand = new(1157, "Weapon_On_Hit_Stun_Proc_Chance_MainHand", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Weapon_On_Hit_Stun_Proc_Chance_OffHand = new(1158, "Weapon_On_Hit_Stun_Proc_Chance_OffHand", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Weapon_On_Hit_Stun_Proc_Chance_CurrentHand = new(1159, "Weapon_On_Hit_Stun_Proc_Chance_CurrentHand", encodingType: GameAttributeEncoding.Float16, script: "(DualWield_Hand ? Weapon_On_Hit_Stun_Proc_Chance_OffHand : Weapon_On_Hit_Stun_Proc_Chance_MainHand)", bitCount: 16);
        public static readonly GameAttributeF Weapon_On_Hit_Blind_Proc_Chance_MainHand = new(1160, "Weapon_On_Hit_Blind_Proc_Chance_MainHand", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Weapon_On_Hit_Blind_Proc_Chance_OffHand = new(1161, "Weapon_On_Hit_Blind_Proc_Chance_OffHand", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Weapon_On_Hit_Blind_Proc_Chance_CurrentHand = new(1162, "Weapon_On_Hit_Blind_Proc_Chance_CurrentHand", encodingType: GameAttributeEncoding.Float16, script: "(DualWield_Hand ? Weapon_On_Hit_Blind_Proc_Chance_OffHand : Weapon_On_Hit_Blind_Proc_Chance_MainHand)", bitCount: 16);
        public static readonly GameAttributeF Weapon_On_Hit_Freeze_Proc_Chance_MainHand = new(1163, "Weapon_On_Hit_Freeze_Proc_Chance_MainHand", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Weapon_On_Hit_Freeze_Proc_Chance_OffHand = new(1164, "Weapon_On_Hit_Freeze_Proc_Chance_OffHand", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Weapon_On_Hit_Freeze_Proc_Chance_CurrentHand = new(1165, "Weapon_On_Hit_Freeze_Proc_Chance_CurrentHand", encodingType: GameAttributeEncoding.Float16, script: "(DualWield_Hand ? Weapon_On_Hit_Freeze_Proc_Chance_OffHand : Weapon_On_Hit_Freeze_Proc_Chance_MainHand)", bitCount: 16);
        public static readonly GameAttributeF Weapon_On_Hit_Chill_Proc_Chance_MainHand = new(1166, "Weapon_On_Hit_Chill_Proc_Chance_MainHand", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Weapon_On_Hit_Chill_Proc_Chance_OffHand = new(1167, "Weapon_On_Hit_Chill_Proc_Chance_OffHand", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Weapon_On_Hit_Chill_Proc_Chance_CurrentHand = new(1168, "Weapon_On_Hit_Chill_Proc_Chance_CurrentHand", encodingType: GameAttributeEncoding.Float16, script: "(DualWield_Hand ? Weapon_On_Hit_Chill_Proc_Chance_OffHand : Weapon_On_Hit_Chill_Proc_Chance_MainHand)", bitCount: 16);
        public static readonly GameAttributeF Weapon_On_Hit_Slow_Proc_Chance_MainHand = new(1169, "Weapon_On_Hit_Slow_Proc_Chance_MainHand", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Weapon_On_Hit_Slow_Proc_Chance_OffHand = new(1170, "Weapon_On_Hit_Slow_Proc_Chance_OffHand", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Weapon_On_Hit_Slow_Proc_Chance_CurrentHand = new(1171, "Weapon_On_Hit_Slow_Proc_Chance_CurrentHand", encodingType: GameAttributeEncoding.Float16, script: "(DualWield_Hand ? Weapon_On_Hit_Slow_Proc_Chance_OffHand : Weapon_On_Hit_Slow_Proc_Chance_MainHand)", bitCount: 16);
        public static readonly GameAttributeF Weapon_On_Hit_Immobilize_Proc_Chance_MainHand = new(1172, "Weapon_On_Hit_Immobilize_Proc_Chance_MainHand", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Weapon_On_Hit_Immobilize_Proc_Chance_OffHand = new(1173, "Weapon_On_Hit_Immobilize_Proc_Chance_OffHand", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Weapon_On_Hit_Immobilize_Proc_Chance_CurrentHand = new(1174, "Weapon_On_Hit_Immobilize_Proc_Chance_CurrentHand", encodingType: GameAttributeEncoding.Float16, script: "(DualWield_Hand ? Weapon_On_Hit_Immobilize_Proc_Chance_OffHand : Weapon_On_Hit_Immobilize_Proc_Chance_MainHand)", bitCount: 16);
        public static readonly GameAttributeF Weapon_On_Hit_Knockback_Proc_Chance_MainHand = new(1175, "Weapon_On_Hit_Knockback_Proc_Chance_MainHand", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Weapon_On_Hit_Knockback_Proc_Chance_OffHand = new(1176, "Weapon_On_Hit_Knockback_Proc_Chance_OffHand", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Weapon_On_Hit_Knockback_Proc_Chance_CurrentHand = new(1177, "Weapon_On_Hit_Knockback_Proc_Chance_CurrentHand", encodingType: GameAttributeEncoding.Float16, script: "(DualWield_Hand ? Weapon_On_Hit_Knockback_Proc_Chance_OffHand : Weapon_On_Hit_Knockback_Proc_Chance_MainHand)", bitCount: 16);
        public static readonly GameAttributeF Weapon_On_Hit_Bleed_Proc_Chance_MainHand = new(1178, "Weapon_On_Hit_Bleed_Proc_Chance_MainHand", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Weapon_On_Hit_Bleed_Proc_Chance_OffHand = new(1179, "Weapon_On_Hit_Bleed_Proc_Chance_OffHand", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Weapon_On_Hit_Bleed_Proc_Chance_CurrentHand = new(1180, "Weapon_On_Hit_Bleed_Proc_Chance_CurrentHand", encodingType: GameAttributeEncoding.Float16, script: "(DualWield_Hand ? Weapon_On_Hit_Bleed_Proc_Chance_OffHand : Weapon_On_Hit_Bleed_Proc_Chance_MainHand)", bitCount: 16);
        public static readonly GameAttributeF Weapon_On_Hit_Bleed_Proc_Damage_Base_MainHand = new(1181, "Weapon_On_Hit_Bleed_Proc_Damage_Base_MainHand", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Weapon_On_Hit_Bleed_Proc_Damage_Base_OffHand = new(1182, "Weapon_On_Hit_Bleed_Proc_Damage_Base_OffHand", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Weapon_On_Hit_Bleed_Proc_Damage_Base_CurrentHand = new(1183, "Weapon_On_Hit_Bleed_Proc_Damage_Base_CurrentHand", encodingType: GameAttributeEncoding.Float16Or32, script: "(DualWield_Hand ? Weapon_On_Hit_Bleed_Proc_Damage_Base_OffHand : Weapon_On_Hit_Bleed_Proc_Damage_Base_MainHand)", bitCount: 0);
        public static readonly GameAttributeF Weapon_On_Hit_Bleed_Proc_Damage_Delta_MainHand = new(1184, "Weapon_On_Hit_Bleed_Proc_Damage_Delta_MainHand", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Weapon_On_Hit_Bleed_Proc_Damage_Delta_OffHand = new(1185, "Weapon_On_Hit_Bleed_Proc_Damage_Delta_OffHand", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Weapon_On_Hit_Bleed_Proc_Damage_Delta_CurrentHand = new(1186, "Weapon_On_Hit_Bleed_Proc_Damage_Delta_CurrentHand", encodingType: GameAttributeEncoding.Float16Or32, script: "(DualWield_Hand ? Weapon_On_Hit_Bleed_Proc_Damage_Delta_OffHand : Weapon_On_Hit_Bleed_Proc_Damage_Delta_MainHand)", bitCount: 0);
        public static readonly GameAttributeF Weapon_On_Hit_Percent_Bleed_Proc_Chance_MainHand = new(1187, "Weapon_On_Hit_Percent_Bleed_Proc_Chance_MainHand", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Weapon_On_Hit_Percent_Bleed_Proc_Chance_OffHand = new(1188, "Weapon_On_Hit_Percent_Bleed_Proc_Chance_OffHand", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Weapon_On_Hit_Percent_Bleed_Proc_Chance_CurrentHand = new(1189, "Weapon_On_Hit_Percent_Bleed_Proc_Chance_CurrentHand", encodingType: GameAttributeEncoding.Float16Or32, script: "(DualWield_Hand ? Weapon_On_Hit_Percent_Bleed_Proc_Chance_OffHand : Weapon_On_Hit_Percent_Bleed_Proc_Chance_MainHand)", bitCount: 0);
        public static readonly GameAttributeF Weapon_On_Hit_Percent_Bleed_Proc_Damage_MainHand = new(1190, "Weapon_On_Hit_Percent_Bleed_Proc_Damage_MainHand", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Weapon_On_Hit_Percent_Bleed_Proc_Damage_Base_OffHand = new(1191, "Weapon_On_Hit_Percent_Bleed_Proc_Damage_Base_OffHand", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Weapon_On_Hit_Percent_Bleed_Proc_Damage_Base_CurrentHand = new(1192, "Weapon_On_Hit_Percent_Bleed_Proc_Damage_Base_CurrentHand", encodingType: GameAttributeEncoding.Float16Or32, script: "(DualWield_Hand ? Weapon_On_Hit_Percent_Bleed_Proc_Damage_Base_OffHand : Weapon_On_Hit_Percent_Bleed_Proc_Damage_MainHand)", bitCount: 0);
        public static readonly GameAttributeF Weapon_On_Hit_Percent_Bleed_Proc_Duration_MainHand = new(1193, "Weapon_On_Hit_Percent_Bleed_Proc_Duration_MainHand", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Weapon_On_Hit_Percent_Bleed_Proc_Duration_OffHand = new(1194, "Weapon_On_Hit_Percent_Bleed_Proc_Duration_OffHand", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Weapon_On_Hit_Percent_Bleed_Proc_Duration_CurrentHand = new(1195, "Weapon_On_Hit_Percent_Bleed_Proc_Duration_CurrentHand", encodingType: GameAttributeEncoding.Float16Or32, script: "(DualWield_Hand ? Weapon_On_Hit_Percent_Bleed_Proc_Duration_OffHand : Weapon_On_Hit_Percent_Bleed_Proc_Duration_MainHand)", bitCount: 0);
        public static readonly GameAttributeF Power_Damage_Percent_Bonus = new(1196, "Power_Damage_Percent_Bonus");
        public static readonly GameAttributeF Power_Instance_Damage_Percent_Bonus = new(1197, "Power_Instance_Damage_Percent_Bonus", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Power_Resource_Reduction = new(1198, "Power_Resource_Reduction", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Power_Resource_Reduction_Percent = new(1199, "Power_Resource_Reduction_Percent", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Power_Cooldown_Reduction = new(1200, "Power_Cooldown_Reduction", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Power_Cooldown_Reduction_All = new(1201, "Power_Cooldown_Reduction_All", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Power_Duration_Increase = new(1202, "Power_Duration_Increase", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Power_Crit_Percent_Bonus = new(1203, "Power_Crit_Percent_Bonus", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Weapon_Crit_Chance = new(1204, "Weapon_Crit_Chance", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Weapon_Crit_Chance_MainHand = new(1205, "Weapon_Crit_Chance_MainHand", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Weapon_Crit_Chance_OffHand = new(1206, "Weapon_Crit_Chance_OffHand", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Weapon_Crit_Chance_CurrentHand = new(1207, "Weapon_Crit_Chance_CurrentHand", encodingType: GameAttributeEncoding.Float16, script: "(DualWield_Hand ? Weapon_Crit_Chance_OffHand : Weapon_Crit_Chance_MainHand)", bitCount: 16);
        public static readonly GameAttributeF Strength_Item = new(1208, "Strength_Item");
        public static readonly GameAttributeF Dexterity_Item = new(1209, "Dexterity_Item");
        public static readonly GameAttributeF Intelligence_Item = new(1210, "Intelligence_Item");
        public static readonly GameAttributeF Vitality_Item = new(1211, "Vitality_Item");
        public static readonly GameAttributeI Item_Level_Requirement_Reduction = new(1212, "Item_Level_Requirement_Reduction");
        public static readonly GameAttributeI Item_Level_Requirement_Override = new(1213, "Item_Level_Requirement_Override");
        public static readonly GameAttributeF Item_Durability_Percent_Bonus = new(1214, "Item_Durability_Percent_Bonus", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeB Item_Indestructible = new(1215, "Item_Indestructible");
        public static readonly GameAttributeB Player_All_Items_Indestructible = new(1216, "Player_All_Items_Indestructible");
        public static readonly GameAttributeF Core_Attributes_From_Item_Bonus_Multiplier = new(1217, "Core_Attributes_From_Item_Bonus_Multiplier", defaultValue: 1065353216);
        public static readonly GameAttributeB Waiting_To_Accept_Resurrection = new(1218, "Waiting_To_Accept_Resurrection");
        public static readonly GameAttributeB Ghosted = new(1219, "Ghosted");
        public static readonly GameAttributeF Special_Inventory_Has_Sold = new(1220, "Special_Inventory_Has_Sold");
        public static readonly GameAttributeI Special_Inventory_Index = new(1221, "Special_Inventory_Index", defaultValue: -1, min: -1, max: 31, bitCount: 6);
        public static readonly GameAttributeF Inventory_Reroll_Time = new(1222, "Inventory_Reroll_Time");
        public static readonly GameAttributeF Fiil1 = new(1223, "Fiil1", defaultValue: -1);
        public static readonly GameAttributeF Fiil2 = new(1224, "Fiil2", defaultValue: -1);
        public static readonly GameAttributeF Power_Channel_Lockout_Time = new(1225, "Power_Channel_Lockout_Time");
        public static readonly GameAttributeF Power_Buff_0_Lockout_Time = new(1226, "Power_Buff_0_Lockout_Time");
        public static readonly GameAttributeF Power_Buff_1_Lockout_Time = new(1227, "Power_Buff_1_Lockout_Time");
        public static readonly GameAttributeF Power_Buff_2_Lockout_Time = new(1228, "Power_Buff_2_Lockout_Time");
        public static readonly GameAttributeF Power_Buff_3_Lockout_Time = new(1229, "Power_Buff_3_Lockout_Time");
        public static readonly GameAttributeF Power_Buff_4_Lockout_Time = new(1230, "Power_Buff_4_Lockout_Time");
        public static readonly GameAttributeF Power_Buff_5_Lockout_Time = new(1231, "Power_Buff_5_Lockout_Time");
        public static readonly GameAttributeF Power_Buff_6_Lockout_Time = new(1232, "Power_Buff_6_Lockout_Time");
        public static readonly GameAttributeF Power_Buff_7_Lockout_Time = new(1233, "Power_Buff_7_Lockout_Time");
        public static readonly GameAttributeF Power_Buff_8_Lockout_Time = new(1234, "Power_Buff_8_Lockout_Time");
        public static readonly GameAttributeF Power_Buff_9_Lockout_Time = new(1235, "Power_Buff_9_Lockout_Time");
        public static readonly GameAttributeF Power_Buff_10_Lockout_Time = new(1236, "Power_Buff_10_Lockout_Time");
        public static readonly GameAttributeF Power_Buff_11_Lockout_Time = new(1237, "Power_Buff_11_Lockout_Time");
        public static readonly GameAttributeF Power_Buff_12_Lockout_Time = new(1238, "Power_Buff_12_Lockout_Time");
        public static readonly GameAttributeF Power_Buff_13_Lockout_Time = new(1239, "Power_Buff_13_Lockout_Time");
        public static readonly GameAttributeF Power_Buff_14_Lockout_Time = new(1240, "Power_Buff_14_Lockout_Time");
        public static readonly GameAttributeF Power_Buff_15_Lockout_Time = new(1241, "Power_Buff_15_Lockout_Time");
        public static readonly GameAttributeF Power_Buff_16_Lockout_Time = new(1242, "Power_Buff_16_Lockout_Time");
        public static readonly GameAttributeF Power_Buff_17_Lockout_Time = new(1243, "Power_Buff_17_Lockout_Time");
        public static readonly GameAttributeF Power_Buff_18_Lockout_Time = new(1244, "Power_Buff_18_Lockout_Time");
        public static readonly GameAttributeF Power_Buff_19_Lockout_Time = new(1245, "Power_Buff_19_Lockout_Time");
        public static readonly GameAttributeF Power_Buff_20_Lockout_Time = new(1246, "Power_Buff_20_Lockout_Time");
        public static readonly GameAttributeF Power_Buff_21_Lockout_Time = new(1247, "Power_Buff_21_Lockout_Time");
        public static readonly GameAttributeF Power_Buff_22_Lockout_Time = new(1248, "Power_Buff_22_Lockout_Time");
        public static readonly GameAttributeF Power_Buff_23_Lockout_Time = new(1249, "Power_Buff_23_Lockout_Time");
        public static readonly GameAttributeF Power_Buff_24_Lockout_Time = new(1250, "Power_Buff_24_Lockout_Time");
        public static readonly GameAttributeF Power_Buff_25_Lockout_Time = new(1251, "Power_Buff_25_Lockout_Time");
        public static readonly GameAttributeF Power_Buff_26_Lockout_Time = new(1252, "Power_Buff_26_Lockout_Time");
        public static readonly GameAttributeF Power_Buff_27_Lockout_Time = new(1253, "Power_Buff_27_Lockout_Time");
        public static readonly GameAttributeF Power_Buff_28_Lockout_Time = new(1254, "Power_Buff_28_Lockout_Time");
        public static readonly GameAttributeF Power_Buff_29_Lockout_Time = new(1255, "Power_Buff_29_Lockout_Time");
        public static readonly GameAttributeF Power_Buff_30_Lockout_Time = new(1256, "Power_Buff_30_Lockout_Time");
        public static readonly GameAttributeF Power_Buff_31_Lockout_Time = new(1257, "Power_Buff_31_Lockout_Time");
        public static readonly GameAttributeI Known_By_Owner = new(1258, "Known_By_Owner", defaultValue: -1);
        public static readonly GameAttributeB Never_Deactivates = new(1259, "Never_Deactivates");
        public static readonly GameAttributeB Account_Under_Review = new(1260, "Account_Under_Review");
        public static readonly GameAttributeF Projectile_Detonate_Time = new(1261, "Projectile_Detonate_Time");
        public static readonly GameAttributeB Projectile_Uncapped_Lifetime = new(1262, "Projectile_Uncapped_Lifetime");
        public static readonly GameAttributeF PageOfFate_Item = new(1263, "PageOfFate_Item", defaultValue: -1);
        public static readonly GameAttributeF Accolade_0 = new(1264, "Accolade_0", defaultValue: -1);
        public static readonly GameAttributeF Accolade_1 = new(1265, "Accolade_1", defaultValue: -1);
        public static readonly GameAttributeF Accolade_2 = new(1266, "Accolade_2", defaultValue: -1);
        public static readonly GameAttributeF Accolade_3 = new(1267, "Accolade_3", defaultValue: -1);
        public static readonly GameAttributeF Accolade_4 = new(1268, "Accolade_4", defaultValue: -1);
        public static readonly GameAttributeF Accolade_0_Value = new(1269, "Accolade_0_Value");
        public static readonly GameAttributeF Accolade_1_Value = new(1270, "Accolade_1_Value");
        public static readonly GameAttributeF Accolade_2_Value = new(1271, "Accolade_2_Value");
        public static readonly GameAttributeF Accolade_3_Value = new(1272, "Accolade_3_Value");
        public static readonly GameAttributeF Accolade_4_Value = new(1273, "Accolade_4_Value");
        public static readonly GameAttributeI PVP_Rank = new(1274, "PVP_Rank", min: -1, max: 100, bitCount: 7);
        public static readonly GameAttributeF PVP_Tokens = new(1275, "PVP_Tokens");
        public static readonly GameAttributeI PVP_Experience_Next_Lo = new(1276, "PVP_Experience_Next_Lo");
        public static readonly GameAttributeI PVP_Experience_Next_Hi = new(1277, "PVP_Experience_Next_Hi");
        public static readonly GameAttributeF PVP_Gold_Gained_This_Game = new(1278, "PVP_Gold_Gained_This_Game");
        public static readonly GameAttributeF PVP_PVP_Experience_Gained_This_Game_Lo = new(1279, "PVP_PVP_Experience_Gained_This_Game_Lo");
        public static readonly GameAttributeF PVP_PVP_Experience_Gained_This_Game_Hi = new(1280, "PVP_PVP_Experience_Gained_This_Game_Hi");
        public static readonly GameAttributeF PVP_Normal_Experience_Gained_This_Game_Lo = new(1281, "PVP_Normal_Experience_Gained_This_Game_Lo");
        public static readonly GameAttributeF PVP_Normal_Experience_Gained_This_Game_Hi = new(1282, "PVP_Normal_Experience_Gained_This_Game_Hi");
        public static readonly GameAttributeF PVP_Tokens_Gained_This_Game = new(1283, "PVP_Tokens_Gained_This_Game");
        public static readonly GameAttributeI PVP_Level_Equalizer_Level = new(1284, "PVP_Level_Equalizer_Level", min: -1, max: 70, bitCount: 7);
        public static readonly GameAttributeB Is_Temporary_Lure = new(1285, "Is_Temporary_Lure", defaultValue: true);
        public static readonly GameAttributeB Ignore_Lure = new(1286, "Ignore_Lure");
        public static readonly GameAttributeI Effect_Owner_ANN = new(1287, "Effect_Owner_ANN", defaultValue: -1);
        public static readonly GameAttributeB Elite_Engaged = new(1288, "Elite_Engaged");
        public static readonly GameAttributeF Engaged_Rare_Time = new(1289, "Engaged_Rare_Time");
        public static readonly GameAttributeF Engaged_Goblin_Time = new(1290, "Engaged_Goblin_Time");
        public static readonly GameAttributeF On_Death_Accolade_0 = new(1291, "On_Death_Accolade_0", defaultValue: -1);
        public static readonly GameAttributeF On_Death_Accolade_0_Value = new(1292, "On_Death_Accolade_0_Value");
        public static readonly GameAttributeF Item_Power_Passive = new(1293, "Item_Power_Passive");
        public static readonly GameAttributeF PVP_TeamDeathmatch_Games_Played = new(1294, "PVP_TeamDeathmatch_Games_Played");
        public static readonly GameAttributeF Last_Health_Drop_Interval = new(1295, "Last_Health_Drop_Interval", defaultValue: -1);
        public static readonly GameAttributeF CrowdControl_Resistance = new(1296, "CrowdControl_Resistance", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF CrowdControl_Projected_End_Time = new(1297, "CrowdControl_Projected_End_Time", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Last_Continuous_Knockback_Power_ID = new(1298, "Last_Continuous_Knockback_Power_ID", defaultValue: -1);
        public static readonly GameAttributeB Charmed = new(1299, "Charmed");
        public static readonly GameAttributeB Taunted = new(1300, "Taunted");
        public static readonly GameAttributeB Dueling = new(1301, "Dueling");
        public static readonly GameAttributeB PVP_Player_Revealed_On_Map = new(1302, "PVP_Player_Revealed_On_Map");
        public static readonly GameAttributeF Targeted_Legendary_Chance = new(1303, "Targeted_Legendary_Chance");
        public static readonly GameAttributeF Seasonal_Legendary_Chance = new(1304, "Seasonal_Legendary_Chance", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeB Received_Seasonal_Legendary = new(1305, "Received_Seasonal_Legendary");
        public static readonly GameAttributeB Has_Dropped_Special_loot = new(1306, "Has_Dropped_Special_loot");
        public static readonly GameAttributeB Scroll_Buff = new(1307, "Scroll_Buff");
        public static readonly GameAttributeB Buff_Exclusive_Type_Active = new(1308, "Buff_Exclusive_Type_Active", flags: ReplicationFlags.PlayerReplicated2 | ReplicationFlags.ItemReplicated);
        public static readonly GameAttributeB In_Combat_With_Player = new(1309, "In_Combat_With_Player");
        public static readonly GameAttributeF Actor_Forwards_Buffs = new(1310, "Actor_Forwards_Buffs", defaultValue: -1);
        public static readonly GameAttributeF Item_Marked_As_Junk = new(1311, "Item_Marked_As_Junk");
        public static readonly GameAttributeB Allow_2H_And_Shield = new(1312, "Allow_2H_And_Shield");
        public static readonly GameAttributeF Class_Damage_Reduction_Percent_PVP = new(1313, "Class_Damage_Reduction_Percent_PVP", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeI Paragon_Bonus = new(1314, "Paragon_Bonus");
        public static readonly GameAttributeI Paragon_Bonus_Points_Available = new(1315, "Paragon_Bonus_Points_Available");
        public static readonly GameAttributeF Dungeon_Finder_Progress_Percent = new(1316, "Dungeon_Finder_Progress_Percent");
        public static readonly GameAttributeF Item_Trade_Player_High = new(1317, "Item_Trade_Player_High");
        public static readonly GameAttributeF Item_Trade_Player_Low = new(1318, "Item_Trade_Player_Low");
        public static readonly GameAttributeF Item_Trade_End_Time = new(1319, "Item_Trade_End_Time");
        public static readonly GameAttributeF Item_Trade_Timer_ID = new(1320, "Item_Trade_Timer_ID", defaultValue: -1);
        public static readonly GameAttributeB Item_Is_BOE = new(1321, "Item_Is_BOE");
        public static readonly GameAttributeF Season = new(1322, "Season");
        public static readonly GameAttributeI DamageDoneTotalTrackedHi = new(1323, "DamageDoneTotalTrackedHi");
        public static readonly GameAttributeI DamageDoneTotalTrackedLo = new(1324, "DamageDoneTotalTrackedLo");
        public static readonly GameAttributeI DamageDoneTrackingStartTick = new(1325, "DamageDoneTrackingStartTick");
        public static readonly GameAttributeF PowerPersistsAcrossGames = new(1326, "PowerPersistsAcrossGames");
        public static readonly GameAttributeF Experience_Bonus_Percent_IGR_Buff = new(1327, "Experience_Bonus_Percent_IGR_Buff", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Experience_Bonus_Percent_Anniversary_Buff = new(1328, "Experience_Bonus_Percent_Anniversary_Buff", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Experience_Bonus_Percent_Community_Buff = new(1329, "Experience_Bonus_Percent_Community_Buff", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Experience_Bonus_Percent_Potion_Buff = new(1330, "Experience_Bonus_Percent_Potion_Buff", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Experience_Bonus_Percent_Super_Scalar = new(1331, "Experience_Bonus_Percent_Super_Scalar", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF Experience_Bonus_Percent_Super_Scalar_Total = new(1332, "Experience_Bonus_Percent_Super_Scalar_Total", encodingType: GameAttributeEncoding.Float16Or32, script: "(Experience_Bonus_Percent_Super_Scalar + 1) * (Experience_Bonus_Percent_Community_Buff + 1) * (Experience_Bonus_Percent_IGR_Buff + 1) * (Experience_Bonus_Percent_Anniversary_Buff + 1) * (Experience_Bonus_Percent_Potion_Buff + 1)", bitCount: 0);
        public static readonly GameAttributeB AlwaysShowFloatingNumbers = new(1333, "AlwaysShowFloatingNumbers");
        public static readonly GameAttributeF Targeted_Rare_Chance = new(1334, "Targeted_Rare_Chance");
        public static readonly GameAttributeB Supress_Thorns_Effect = new(1335, "Supress_Thorns_Effect");
        public static readonly GameAttributeF Dynamic_Entrance_GUID = new(1336, "Dynamic_Entrance_GUID");
        public static readonly GameAttributeF Bonus_Chance_To_Be_Crit_Hit = new(1337, "Bonus_Chance_To_Be_Crit_Hit");
        public static readonly GameAttributeF Bonus_Chance_To_Be_Crit_Hit_By_Actor = new(1338, "Bonus_Chance_To_Be_Crit_Hit_By_Actor");
        public static readonly GameAttributeF Bonus_Chance_To_Receive_Crushing_Blown = new(1339, "Bonus_Chance_To_Receive_Crushing_Blown");
        public static readonly GameAttributeB Force_Gripped = new(1340, "Force_Gripped");
        public static readonly GameAttributeF PowerBonusAttackRadius = new(1341, "PowerBonusAttackRadius");
        public static readonly GameAttributeF Item_Store_Player_High = new(1342, "Item_Store_Player_High");
        public static readonly GameAttributeF Item_Store_Player_Low = new(1343, "Item_Store_Player_Low");
        public static readonly GameAttributeF Power_Primary_Resource_Cost_Override = new(1344, "Power_Primary_Resource_Cost_Override", defaultValue: 2139095039);
        public static readonly GameAttributeF Power_Secondary_Resource_Cost_Override = new(1345, "Power_Secondary_Resource_Cost_Override", defaultValue: 2139095039);
        public static readonly GameAttributeF Power_Channel_Cost_Override = new(1346, "Power_Channel_Cost_Override", defaultValue: 2139095039);
        public static readonly GameAttributeI Rune_A_Override = new(1347, "Rune_A_Override", max: 255, bitCount: 8);
        public static readonly GameAttributeI Rune_B_Override = new(1348, "Rune_B_Override", max: 255, bitCount: 8);
        public static readonly GameAttributeI Rune_C_Override = new(1349, "Rune_C_Override", max: 255, bitCount: 8);
        public static readonly GameAttributeI Rune_D_Override = new(1350, "Rune_D_Override", max: 255, bitCount: 8);
        public static readonly GameAttributeI Rune_E_Override = new(1351, "Rune_E_Override", max: 255, bitCount: 8);
        public static readonly GameAttributeF Elemental_Effect_Amplitude_Bonus = new(1352, "Elemental_Effect_Amplitude_Bonus");
        public static readonly GameAttributeF Elemental_Effect_Duration_Bonus = new(1353, "Elemental_Effect_Duration_Bonus");
        public static readonly GameAttributeF Elemental_Effect_Proc_Chance_Bonus = new(1354, "Elemental_Effect_Proc_Chance_Bonus");
        public static readonly GameAttributeF Splash_Damage_Effect_Percent = new(1355, "Splash_Damage_Effect_Percent");
        public static readonly GameAttributeF Crushing_Blow_Proc_Chance = new(1356, "Crushing_Blow_Proc_Chance");
        public static readonly GameAttributeB Item_Equipped_But_Disabled = new(1357, "Item_Equipped_But_Disabled");
        public static readonly GameAttributeB Item_Equipped_But_Disabled_Duplicate_Legendary = new(1358, "Item_Equipped_But_Disabled_Duplicate_Legendary");
        public static readonly GameAttributeB Attribute_Projectile_Pass_Through = new(1359, "Attribute_Projectile_Pass_Through");
        public static readonly GameAttributeI Attribute_Set_Item_Discount = new(1360, "Attribute_Set_Item_Discount", max: 255, bitCount: 8);
        public static readonly GameAttributeF Negative_Health_Globe_Spawn_Chance = new(1361, "Negative_Health_Globe_Spawn_Chance");
        public static readonly GameAttributeF Override_Attached_Anim = new(1362, "Override_Attached_Anim", defaultValue: -1);
        public static readonly GameAttributeB Has_Infinite_Shrine_Buffs = new(1363, "Has_Infinite_Shrine_Buffs");
        public static readonly GameAttributeF Item_Legendary_Item_Base_Item = new(1364, "Item_Legendary_Item_Base_Item", defaultValue: -1);
        public static readonly GameAttributeF Targeted_Magic_Chance = new(1365, "Targeted_Magic_Chance");
        public static readonly GameAttributeB Dont_Update_Camera_While_Attached = new(1366, "Dont_Update_Camera_While_Attached");
        public static readonly GameAttributeF LinkedDynamicEntranceGUID = new(1367, "LinkedDynamicEntranceGUID");
        public static readonly GameAttributeI Boost_TC_Index = new(1368, "Boost_TC_Index", max: 31, bitCount: 5);
        public static readonly GameAttributeF Boost_TC_NextTime = new(1369, "Boost_TC_NextTime");
        public static readonly GameAttributeF Potion_Bonus_Armor_Percent = new(1370, "Potion_Bonus_Armor_Percent");
        public static readonly GameAttributeF Potion_Bonus_Resist_All = new(1371, "Potion_Bonus_Resist_All");
        public static readonly GameAttributeF Potion_Bonus_Hitpoints_Granted = new(1372, "Potion_Bonus_Hitpoints_Granted");
        public static readonly GameAttributeF Potion_Bonus_Buff_Duration = new(1373, "Potion_Bonus_Buff_Duration");
        public static readonly GameAttributeF Potion_Bonus_Life_On_Hit = new(1374, "Potion_Bonus_Life_On_Hit");
        public static readonly GameAttributeF Potion_Bonus_Life_On_Kill = new(1375, "Potion_Bonus_Life_On_Kill");
        public static readonly GameAttributeF Last_Special_Item_Time_High = new(1376, "Last_Special_Item_Time_High");
        public static readonly GameAttributeF Last_Special_Item_Time_Low = new(1377, "Last_Special_Item_Time_Low");
        public static readonly GameAttributeF Item_Rest_Bonus_Pool = new(1378, "Item_Rest_Bonus_Pool");
        public static readonly GameAttributeF Item_Unlucky_Bonus_Secs = new(1379, "Item_Unlucky_Bonus_Secs");
        public static readonly GameAttributeF Item_Unlucky_Bonus_Allow = new(1380, "Item_Unlucky_Bonus_Allow");
        public static readonly GameAttributeF Avenger_Buildup_Secs = new(1381, "Avenger_Buildup_Secs");
        public static readonly GameAttributeB Bounty_Objective = new(1382, "Bounty_Objective");
        public static readonly GameAttributeB Illusion = new(1383, "Illusion");
        public static readonly GameAttributeF TornadoStraighten = new(1384, "TornadoStraighten");
        public static readonly GameAttributeB Prevent_Evade_During = new(1385, "Prevent_Evade_During");
        public static readonly GameAttributeF Damage_Bonus_From_Nephalem_Glory = new(1386, "Damage_Bonus_From_Nephalem_Glory");
        public static readonly GameAttributeF Item_Player_Recipient = new(1387, "Item_Player_Recipient", defaultValue: -1, script: "-1");
        public static readonly GameAttributeI Heavens_Fury_Attacker = new(1388, "Heavens_Fury_Attacker", defaultValue: -1, min: -1, max: 7, bitCount: 4);
        public static readonly GameAttributeF Item_Assigned_Hero_High = new(1389, "Item_Assigned_Hero_High");
        public static readonly GameAttributeF Item_Assigned_Hero_Low = new(1390, "Item_Assigned_Hero_Low");
        public static readonly GameAttributeF Pierce_Charge = new(1391, "Pierce_Charge");
        public static readonly GameAttributeF Upscaled_Level = new(1392, "Upscaled_Level");
        public static readonly GameAttributeB Resurrected = new(1393, "Resurrected");
        public static readonly GameAttributeF Damage_SidekickMultiplier = new(1394, "Damage_SidekickMultiplier");
        public static readonly GameAttributeF Thorns_AOE_Radius_Next_Time = new(1395, "Thorns_AOE_Radius_Next_Time");
        public static readonly GameAttributeB Movement_Destroys_Waller_Walls = new(1396, "Movement_Destroys_Waller_Walls");
        public static readonly GameAttributeB Mail_Flag_Icon = new(1397, "Mail_Flag_Icon");
        public static readonly GameAttributeF Tiered_Loot_Run_Key_Level = new(1398, "Tiered_Loot_Run_Key_Level", defaultValue: -1);
        public static readonly GameAttributeF In_Tiered_Loot_Run_Level = new(1399, "In_Tiered_Loot_Run_Level", defaultValue: -1);
        public static readonly GameAttributeB Is_Loot_Run_Boss = new(1400, "Is_Loot_Run_Boss");
        public static readonly GameAttributeB ForcedMove = new(1401, "ForcedMove");
        public static readonly GameAttributeI Effective_Level = new(1402, "Effective_Level", script: "Max(Upscaled_Level, Level)");
        public static readonly GameAttributeI Jewel_Rank = new(1403, "Jewel_Rank", defaultValue: 1);
        public static readonly GameAttributeI Item_Console_Max_Level = new(1404, "Item_Console_Max_Level", max: 70, bitCount: 7);
        public static readonly GameAttributeB Console_Promo_Item = new(1405, "Console_Promo_Item");
        public static readonly GameAttributeB Double_BloodShards = new(1406, "Double_BloodShards");
        public static readonly GameAttributeB Double_BountyBags = new(1407, "Double_BountyBags");
        public static readonly GameAttributeI Jewel_Upgrades_Used = new(1408, "Jewel_Upgrades_Used");
        public static readonly GameAttributeI Jewel_Upgrades_Max = new(1409, "Jewel_Upgrades_Max");
        public static readonly GameAttributeI Jewel_Upgrades_Bonus = new(1410, "Jewel_Upgrades_Bonus");
        public static readonly GameAttributeB Item_Ignores_Pickup_Radius_For_Pickup = new(1411, "Item_Ignores_Pickup_Radius_For_Pickup");
        public static readonly GameAttributeB Hunter = new(1412, "Hunter");
        public static readonly GameAttributeB Participating_In_Tiered_Loot_Run = new(1413, "Participating_In_Tiered_Loot_Run");
        public static readonly GameAttributeF Tiered_Loot_Run_Reward_Choice_State = new(1414, "Tiered_Loot_Run_Reward_Choice_State", defaultValue: -1);
        public static readonly GameAttributeF Tiered_Loot_Run_Reward_Receives_Key = new(1415, "Tiered_Loot_Run_Reward_Receives_Key", defaultValue: -1);
        public static readonly GameAttributeF CurrentCosmeticEffect = new(1416, "CurrentCosmeticEffect", defaultValue: -1);
        public static readonly GameAttributeF Bloodshard_Bonus_Percent_Potion_Buff = new(1417, "Bloodshard_Bonus_Percent_Potion_Buff", encodingType: GameAttributeEncoding.Float16Or32, bitCount: 0);
        public static readonly GameAttributeF XP_Potion_Buff_Expiration = new(1418, "XP_Potion_Buff_Expiration");
        public static readonly GameAttributeF Gold_Find_Potion_Buff_Expiration = new(1419, "Gold_Find_Potion_Buff_Expiration");
        public static readonly GameAttributeF Bloodshard_Potion_Buff_Expiration = new(1420, "Bloodshard_Potion_Buff_Expiration");
        public static readonly GameAttributeF Current_Cosmetic_Pet = new(1421, "Current_Cosmetic_Pet", defaultValue: -1);
        public static readonly GameAttributeF Cosmetic_Pet_Power = new(1422, "Cosmetic_Pet_Power");
        public static readonly GameAttributeF Cosmetic_Pet_Expiration = new(1423, "Cosmetic_Pet_Expiration");
        public static readonly GameAttributeF Cosmetic_Portrait_Frame = new(1424, "Cosmetic_Portrait_Frame", defaultValue: -1);
        public static readonly GameAttributeI HQ_Hot_Cold_State = new(1425, "HQ_Hot_Cold_State", defaultValue: -1, min: -1, max: 2, bitCount: 2);
        public static readonly GameAttributeF HQ_Cursed_Realm_Reagents_Collected = new(1426, "HQ_Cursed_Realm_Reagents_Collected");
        public static readonly GameAttributeF HQ_Cursed_Realm_Reagents_Dropped = new(1427, "HQ_Cursed_Realm_Reagents_Dropped");
        public static readonly GameAttributeB Debug_Movement_Type = new(1428, "Debug_Movement_Type");
        public static readonly GameAttributeF Tiered_Loot_Run_Death_Count = new(1429, "Tiered_Loot_Run_Death_Count");
        public static readonly GameAttributeF Tiered_Loot_Run_Corpse_Resurrection_Allowed_GameTime = new(1430, "Tiered_Loot_Run_Corpse_Resurrection_Allowed_GameTime");
        public static readonly GameAttributeF Last_Posted_Achievement_Points = new(1431, "Last_Posted_Achievement_Points");
        public static readonly GameAttributeF Cosmetic_Pet_Actor = new(1432, "Cosmetic_Pet_Actor", defaultValue: -1);
        public static readonly GameAttributeF Platinum_Cap_Remaining = new(1433, "Platinum_Cap_Remaining");
        public static readonly GameAttributeF Platinum_Cap_Last_Gain = new(1434, "Platinum_Cap_Last_Gain");
        public static readonly GameAttributeF Last_Boss_Kill_Time = new(1435, "Last_Boss_Kill_Time");
        public static readonly GameAttributeF Last_Bounty_Complete_Time = new(1436, "Last_Bounty_Complete_Time");
        public static readonly GameAttributeF Last_Treasure_Goblin_Kill_Time = new(1437, "Last_Treasure_Goblin_Kill_Time");
        public static readonly GameAttributeI Stash_Tabs_Purchased_With_Gold = new(1438, "Stash_Tabs_Purchased_With_Gold", max: 5, bitCount: 3);
        public static readonly GameAttributeF Stash_Tabs_Rewarded_By_Achievements = new(1439, "Stash_Tabs_Rewarded_By_Achievements");
        public static readonly GameAttributeB Skill_Button_Flash = new(1440, "Skill_Button_Flash");
        public static readonly GameAttributeF Projectile_Det_Path_Reflect_Count = new(1441, "Projectile_Det_Path_Reflect_Count");
        public static readonly GameAttributeF Last_Cosmetic_Pet = new(1442, "Last_Cosmetic_Pet", defaultValue: -1);
        public static readonly GameAttributeF Platinum_Last_Significant_Kill = new(1443, "Platinum_Last_Significant_Kill");
        public static readonly GameAttributeF Power_Last_Attribute_Snapshot_Update_Time = new(1444, "Power_Last_Attribute_Snapshot_Update_Time");
        public static readonly GameAttributeB Skill_Button_Active_Glow = new(1445, "Skill_Button_Active_Glow");
        public static readonly GameAttributeB Participating_In_Set_Dungeon = new(1446, "Participating_In_Set_Dungeon");
        public static readonly GameAttributeF Multiplicative_Damage_Percent_Bonus = new(1447, "Multiplicative_Damage_Percent_Bonus", defaultValue: 1065353216);
        public static readonly GameAttributeF Multiplicative_Damage_Percent_Bonus_For_Skill = new(1448, "Multiplicative_Damage_Percent_Bonus_For_Skill", defaultValue: 1065353216);
        public static readonly GameAttributeF Multiplicative_Damage_Percent_Bonus_For_Player = new(1449, "Multiplicative_Damage_Percent_Bonus_For_Player", defaultValue: 1065353216);
        public static readonly GameAttributeB In_Set_Dungeon_World = new(1450, "In_Set_Dungeon_World");
        public static readonly GameAttributeB In_Swarm_Rift_World = new(1451, "In_Swarm_Rift_World");
        public static readonly GameAttributeF Multiplicative_Damage_Percent_Bonus_No_Pets = new(1452, "Multiplicative_Damage_Percent_Bonus_No_Pets", defaultValue: 1065353216);
        public static readonly GameAttributeF Multiplicative_Damage_Percent_Bonus_ochallengeAgainst_CC_Targets = new(1453, "Multiplicative_Damage_Percent_Bonus_ochallengeAgainst_CC_Targets", defaultValue: 1065353216);
        public static readonly GameAttributeF Multiplicative_Damage_Percent_Bonus_Against_Slowed_Targets = new(1454, "Multiplicative_Damage_Percent_Bonus_Against_Slowed_Targets", defaultValue: 1065353216);
        public static readonly GameAttributeB Summoned_By_Autocast = new(1455, "Summoned_By_Autocast");
        public static readonly GameAttributeF Necromancer_Corpse_Spawn_Chance = new(1456, "Necromancer_Corpse_Spawn_Chance", encodingType: GameAttributeEncoding.Float16, bitCount: 16);
        public static readonly GameAttributeF Necromancer_Last_Corpse_Spawn_Check_Tick = new(1457, "Necromancer_Last_Corpse_Spawn_Check_Tick");
        public static readonly GameAttributeF Necromancer_Corpse_Owner_Player_High = new(1458, "Necromancer_Corpse_Owner_Player_High");
        public static readonly GameAttributeF Necromancer_Corpse_Owner_Player_Low = new(1459, "Necromancer_Corpse_Owner_Player_Low");
        public static readonly GameAttributeF Necromancer_Corpse_Charges = new(1460, "Necromancer_Corpse_Charges");
        public static readonly GameAttributeI Necromancer_Corpse_Source_Monster_SNO = new(1461, "Necromancer_Corpse_Source_Monster_SNO", defaultValue: -1);
        public static readonly GameAttributeB Necromancer_Corpse_Free_Casting = new(1462, "Necromancer_Corpse_Free_Casting");
        public static readonly GameAttributeI Currencies_Discovered = new(1463, "Currencies_Discovered");
        public static readonly GameAttributeF In_Tiered_Challenge_Rift = new(1464, "In_Tiered_Challenge_Rift");
        public static readonly GameAttributeF Necromancer_Cursed = new(1465, "Necromancer_Cursed", defaultValue: -1);
        public static readonly GameAttributeF Necromancer_Curse_Count = new(1466, "Necromancer_Curse_Count");
        public static readonly GameAttributeF Necromancer_Unique_Curse_Count = new(1467, "Necromancer_Unique_Curse_Count");
        public static readonly GameAttributeF Eligible_For_Weekly_Challenge_Reward = new(1468, "Eligible_For_Weekly_Challenge_Reward");
        public static readonly GameAttributeF Force_Remote_FX = new(1469, "Force_Remote_FX");
        public static readonly GameAttributeB Weekly_Challenge_Reward_Icon = new(1470, "Weekly_Challenge_Reward_Icon");
        public static readonly GameAttributeB Item_Was_Touched_By_Armory = new(1471, "Item_Was_Touched_By_Armory");
        public static readonly GameAttributeB Item_Was_Touched_By_Armory_Last_Game = new(1472, "Item_Was_Touched_By_Armory_Last_Game");
        public static readonly GameAttributeB Has_Nfp_Device = new(1473, "Has_Nfp_Device");
        public static readonly GameAttributeB ReceivedPrimalWhenUnlocking = new(1474, "ReceivedPrimalWhenUnlocking");
        public static readonly GameAttributeB KanaiPowersunlocked = new(1475, "KanaiPowersunlocked");
        public static readonly GameAttributeB FourthKanaisCubeSlotunlocked = new(1476, "FourthKanai'sCubeSlotunlocked");
        public static readonly GameAttributeB Seasononlyitemsunlocked = new(1477, "Season-onlyitemsunlocked");
        public static readonly GameAttributeB Soul_shards_unlocked = new(1478, "Soulshardsunlocked");
        public static readonly GameAttributeB Item_was_sanctified = new(1479, "Itemwassanctified");
        public static readonly GameAttributeB Sanctified_items_unlocked = new(1480, "Sanctifieditemsunlocked");
        public static readonly GameAttributeI Heros_Unlocked_Dark_Alchemy_Nodes = new(1481, "HerosunlockedDarkAlchemynodes");
        public static readonly GameAttributeI Dark_Alchemy_Powers_Unlocked = new(1482, "DarkAlchemypowersunlocked");
        public static readonly GameAttributeB Item_Was_Primalized = new(1483, "Itemwasprimalized");
        #endregion
    }
}
